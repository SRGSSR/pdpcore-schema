@namespace("ch.srgssr.pdp.domain.egest")
protocol Schedule {

    import idl "AlternativeIdentifier.avdl";
    import idl "Calendar.avdl";
    import idl "Frequency.avdl";

    /** A schedule defines a repeating time period used to describe a regularly occurring episode. At a minimum a schedule will specify a startDate and a repeatFrequency which describes the interval between occurrences of the episodes. Additional information can be provided to specify the schedule more precisely. This includes identifying the day(s) of the week or month when the recurring episode is broadcast. Schedules may also have an end date to indicate when they are active, e.g. to define a limited calendar of events. */
    record Schedule {
        /** Alternative identifiers from the source system. */
        array<AlternativeIdentifier> alternativeIdentifiers = [];
        /** Defines the day(s) of the week on which episodes of the show are scheduled. */
        array<DayOfWeek> byDay = [];
        /** Defines the month(s) of the year on which episodes of the show are scheduled. */
        array<Month> byMonth = [];
        /** Defines the day(s) of the month on which episodes of the show are scheduled. Specified as an Integer between 1-31. */
        array<int> byMonthDay = [];
        /** Defines the week(s) of the month on which episodes of the show are scheduled. Specified as an Integer between 1-5. For clarity, byMonthWeek is best used in conjunction with byDay to indicate concepts like the first and third Mondays of a month. */
        array<int> byMonthWeek = [];
        /** The duration of a single episode in the show in milliseconds. */
        union{null, long} duration = null;
        /** The start date and time of an episode of the show. */
        timestamp_ms start;
        /** The end date and time of an episode of the show. */
        union{null, timestamp_ms} end = null;
        /** Defines Dates or DateTimes during which a scheduled episode will not take place. The property allows exceptions to a schedule to be specified. If an exception is specified as a DateTime then only the event that would have started at that specific date and time should be excluded from the schedule. If an exception is specified as a Date then any event that is scheduled for that 24 hour period should be excluded from the schedule. This allows a whole day to be excluded from the schedule without having to itemise every scheduled event. */
        array<union{timestamp_ms, date}> exceptions = [];
        /** Defines the frequency at which episodes will occur according to a schedule. The intervals between episodes should be defined as a duration of time. */
        union{null, Frequency} repeatFrequency = null;
        /** Set to true when the schedule contains first showings, set to false when it contains repeat showings. */
        boolean isFirstShowing = true;
    }

}

schema {
  query: Query
}

"Indicates a Bean Validation constraint"
directive @constraint(format: String, max: BigInteger, maxFloat: BigDecimal, maxLength: Int, min: BigInteger, minFloat: BigDecimal, minLength: Int, pattern: String) repeatable on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

"Marks the definition as deprecated with an optional reason."
directive @deprecated(reason: String) on QUERY | MUTATION | SUBSCRIPTION | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

"An agent represents a person, team or department."
interface Agent {
  "The name of the agent."
  name: String!
}

interface Asset {
  hasType: String!
  identifier: String!
}

interface EbucoreAgent {
  agentName: String
  hasType: String!
}

"""
An alternative identifier holds an identifier that is used in a system outside
of PDP, usually the source system. For records having both sourceId and 
alternativeIdentifiers fields, the PDP automatically adds an entry with the
sourceId to the alternativeIdentifiers when ingesting the record.
"""
type AlternativeIdentifier {
  "The source system publishing the metadata."
  provenance: Provenance!
  "The business unit or external organisation publishing the metadata."
  publisher: Publisher!
  "The type of the alternative identifier. The identifier of the source system has the type 'sourceId'."
  type: String!
  "The alternative identifier."
  value: String!
}

"The alternative identifier holds the value for different identifiers which the entities have in other systems"
type AlternativeIdentifierEntity {
  hasProvenance: EbucoreProvenance!
  hasPublisher: String!
  hasType: String!
  identifierType: String!
  identifierValue: String!
}

"An article is a website (CMS) article."
type Article {
  "Alternative identifiers from other systems."
  alternativeIdentifiers: [AlternativeIdentifier]!
  "In the context of the PDP, this field is used to indicate whether the data may be published publicly."
  confidentialityLevel: ConfidentialityLevel!
  "People, teams or departments who contributed to the article."
  contributors: [Agent]!
  "The genres this article belongs to."
  genres: [Genre]!
  "The PDP id."
  id: String!
  "The source system publishing the metadata."
  provenance: Provenance!
  "The business unit or external organisation publishing the metadata."
  publisher: Publisher!
  "The events, real or fictional, covered by the article."
  relatedEvents: [Event]!
  "The locations, real or fictional, covered by the article."
  relatedLocations: [Location]!
  "Pictures related to the article."
  relatedPictures: [Picture]!
  "The title or name given to the article."
  title: Text!
  "The topic(s) addressed by the article."
  topics: [Topic]!
}

type ArticlePage {
  cursor: String
  edges: [Article]!
}

"The aspect ratio of an asset."
type AspectRatio {
  "The aspect ratio, e.g. 16:9 or 4:3."
  ratio: String!
}

type AudioTrack {
  hasLanguage: String
  hasType: String!
  identifier: String!
  trackName: String
}

type Channel {
  "In the context of the PDP this field is used to indicate whether the data may be published publicly."
  accessCondition: ConfidentialityLevel!
  "Alternative identifiers from other systems."
  alternativeIdentifiers: [AlternativeIdentifier]!
  "Specifies the distribution vector of a channel."
  distributionVector: DistributionVector!
  "The PDP id."
  id: String!
  "The name of the channel."
  name: String!
  "The source system publishing the metadata."
  provenance: Provenance!
  "The business unit or external organisation publishing the metadata."
  publisher: Publisher!
  "Pictures associated with the channel."
  relatedPictures: [Picture]!
}

type ClosedSubtitling implements Asset {
  hasLanguage: String
  hasLocator: String
  "Always has the value \"ClosedSubtitling\""
  hasType: String!
  identifier: String!
}

"A group of Programmes, a.k.a 'show', 'émission', 'emissione', 'Sendung'. Examples: 'Mise au Point', 'Arena'."
type Collection implements Asset {
  abstract: String
  description: String
  hasGenre: [GenreEbucore]!
  hasProvenance: EbucoreProvenance!
  hasPublisher: String!
  hasRelatedPicture: [PictureEbucore]!
  "Always has the value \"Collection\""
  hasType: String!
  identifier: String!
  title: String
}

type CollectionPage {
  cursor: String
  edges: [Collection]!
}

"A department describes an organizational unit in the form of a department that is responsible for the editorial creation process of an audiovisual object. An example of an organizational unit is \"Culture\" or \"Sports\"."
type Department implements Agent {
  "The name of the department."
  name: String!
}

type Document implements Asset {
  abstract: String
  commentsAllowed: Boolean
  "ISO-8601"
  dateModified: DateTime
  "ISO-8601"
  dateProduced: DateTime
  "ISO-8601"
  dateReleased: DateTime
  hasAccessConditions: AccessConditionEbucore
  hasContributor: [EbucoreAgent]!
  hasGenre: [GenreEbucore]!
  hasProvenance: EbucoreProvenance
  hasPublisher: String
  hasRelatedEditorialObject: [Item]!
  hasRelatedPicture: [PictureEbucore]!
  hasRelatedResource: [Document]!
  hasRelatedTextLine: [String]!
  hasResourceLocator: String
  hasType: String!
  identifier: String!
  isLongForm: Boolean
  kicker: String
  pubStatus: PubStatus
  resourceFileSize: String
  resourceFilename: String
  tagline: String
  title: String
}

type DocumentPage {
  cursor: String
  edges: [Document]!
}

type DopeSheet implements Asset {
  alternativeIdentifiers: [AlternativeIdentifierEntity]!
  assetType: String!
  "ISO-8601"
  dateExpires: DateTime!
  "ISO-8601"
  dateModified: DateTime!
  "ISO-8601"
  dateProduced: DateTime!
  hasAccessCondition: AccessConditionEbucore!
  hasLanguage: String!
  hasProvenance: EbucoreProvenance!
  hasPublisher: String
  "Always has the value \"Dopesheet\""
  hasType: String!
  hasUsageRights: [String]!
  identifier: String!
  title: String
}

type DopeSheetPage {
  cursor: String
  edges: [DopeSheet]!
}

type EbucoreDepartment implements EbucoreAgent {
  agentName: String
  hasType: String!
}

type EbucorePerson implements EbucoreAgent {
  agentName: String
  familyName: String
  givenName: String
  hasRole: [String]!
  hasType: String!
}

type EbucoreTeam implements EbucoreAgent {
  agentName: String
  hasType: String!
}

"An event, real or fictional, covered by an asset."
type Event {
  "The name of the event, e.g. \"1. August celebration\" or \"Fête des vignerons 2019\"."
  name: Text!
}

"""
Repeat frequency for a show. Usually, only one of the fields is set, but
you can combine them if you need to express a frequency like "every 2 months and
10 days".
"""
type Frequency {
  days: Int
  milliseconds: Int
  months: Int
}

"""
The genre is used to classify audiovisual objects depending on their 
content into subject areas such as "Culture", "Sports", "News" or "Economy".
"""
type Genre {
  "A general description of the genre."
  description: Text
  "The preferred lexical label for a genre, in a given language."
  name: Text!
}

type GenreEbucore {
  description: String
  example: String
  hasProvenance: EbucoreProvenance!
  "Always has the value \"Genre\""
  hasType: String!
  identifier: String!
  prefLabel: String!
}

type Item implements Asset {
  abstract: String
  comments: [String]!
  "ISO-8601"
  dateArchived: DateTime
  "ISO-8601"
  dateModified: DateTime
  description: String
  duration: Int
  end: String
  hasAccessConditions: AccessConditionEbucore!
  hasContributor: [EbucoreAgent]!
  hasParentEditorialObject: Programme!
  hasPart: [Part]!
  hasProducer: [String]!
  hasProductionType: [String]!
  hasProvenance: EbucoreProvenance
  hasRelatedEditorialObject: [Item]!
  hasRelatedLocation: [String]!
  hasRelatedPicture: [PictureEbucore]!
  hasRelatedResource: [Document]!
  hasTopic: [String]!
  "Always has the value \"Item\""
  hasType: String!
  hasUsageRestrictions: String
  hasUsageRights: [String]!
  identifier: String!
  isCoveredBy: [RightsEbucore]!
  isInstantiatedBy: [MediaResource]!
  position: String
  start: String
  tagline: String
  title: String
}

"A geographical location, real or fictional, covered by an episode, clip or article."
type Location {
  "The name of the location, e.g. \"Berne\" or \"Narnia\"."
  name: Text!
}

type MediaResource implements Asset {
  aspectRatio: String
  audioTrackConfiguration: String
  comments: [String]!
  "ISO-8601"
  dateMigrated: DateTime
  "ISO-8601"
  dateModified: DateTime
  "ISO-8601"
  dateProduced: DateTime
  end: String
  hasAudioEncodingFormat: String
  hasAudioTrack: [AudioTrack]!
  hasColourSpace: String
  hasFormat: FormatType
  hasLanguage: String
  hasLocator: String
  hasMedium: String
  hasParentMediaResource: MediaResource
  hasSource: [MediaResource]!
  hasType: String!
  hasVideoEncodingFormat: String
  identifier: String!
  isParentOf: [MediaResource]!
  start: String
}

type Part {
  assetType: AssetType
  "ISO-8601"
  dateArchived: DateTime
  "ISO-8601"
  dateModified: DateTime
  duration: String
  end: String
  hasPublisher: String
  hasRelatedLocation: [String]!
  hasType: String!
  identifier: String!
  start: String
  title: String
}

"A person is a clearly identifiable human actor who is involved in the creation of an editorial object."
type Person implements Agent {
  "The full name of the person."
  name: String!
  "The role(s) the person takes in relation to the asset."
  roles: [Role]!
}

"Describes visual material - such as logos, thumbnails or other visual elements - that belong to an asset."
type Picture {
  "The aspect ratio of the picture, e.g. 16:9 or 4:3."
  aspectRatio: AspectRatio
  "The height of the picture in pixels."
  height: Int
  "Rights and restrictions associated to the picture."
  rights: [Rights]!
  "The title or name given to the picture."
  title: Text
  "The URL from where the picture can be accessed."
  url: URL!
  "The width of the picture in pixels."
  width: Int
}

type PictureEbucore {
  hasIdentifier: AlternativeIdentifierEntity
  hasResourceLocator: String
  hasType: String
  identifier: String
  title: String
}

type Programme implements Asset {
  abstract: String
  assetType: AssetType
  comments: [String]!
  "ISO-8601"
  dateArchived: DateTime
  "ISO-8601"
  dateBroadcast: DateTime
  "ISO-8601"
  dateModified: DateTime
  "ISO-8601"
  dateProduced: DateTime
  description: String
  duration: Int
  episodeNumberInSeason: Int
  hasAccessConditions: AccessConditionEbucore
  hasContributor: [EbucoreAgent]!
  hasGenre: [GenreEbucore]!
  hasIdentifier: [AlternativeIdentifierEntity]!
  hasMember: [Item]!
  hasPart: [Part]!
  hasProducer: [String]!
  hasProductionType: [String]!
  hasProvenance: EbucoreProvenance
  hasRelatedEditorialObject: [Programme]!
  hasRelatedEvent: [String]!
  hasRelatedLocation: [String]!
  hasRelatedPicture: [PictureEbucore]!
  hasRelatedResource: [Document]!
  hasSubtitling: [ClosedSubtitling]!
  hasTopic: [String]!
  "Always has the value \"Programme\""
  hasType: String!
  hasUsageRights: [String]!
  identifier: String!
  isCoveredBy: [RightsEbucore]!
  isInstantiatedBy: [MediaResource]!
  isMemberOf: Collection
  isScheduledOn: [PublicationEvent]!
  position: Int
  seasonNumber: Int
  tagline: String
  title: String
}

type ProgrammePage {
  cursor: String
  edges: [Programme]!
}

type PublicationEvent {
  hasProvenance: EbucoreProvenance!
  hasRelatedPublicationChannel: String
  hasType: String!
  identifier: String!
  "ISO-8601"
  publicationEndDateTime: DateTime
  "ISO-8601"
  publicationStartDateTime: DateTime
}

"Query root"
type Query {
  "Returns the article with the provided PDP id or null if it does not exist."
  article(
    "A PDP id of an article."
    id: String!
  ): Article
  "Returns articles matching the filter criteria."
  articles(
    "The cursor of the previous page. Set to null to get the first page."
    after: String,
    """
    The returned page will contain only articles that match all filters. Only
    filters with values affect the result. If you don't want to filter at all, then 
    you can set this field to null.
    """
    filter: ArticleFilterInput,
    "The number of articles per page."
    first: Int! @constraint(max : 500) @constraint(min : 1)
  ): ArticlePage!
  assets(identifiers: [String]!): [Asset]!
  collectionPage(
    "The cursor of the previous page."
    after: String,
    """
    The returned page will contain only collections that match all filters. Only
    filters with values affect the result. If you don't want to filter at all, then
    you can set this field to null.
    """
    filter: CollectionFilterInput,
    first: Int! @constraint(max : 500) @constraint(min : 1),
    "Deprecated: use filter.hasProvenance instead."
    hasProvenance: EbucoreProvenance @deprecated(reason : "Use filter.hasProvenance instead"),
    "Deprecated: use filter.hasPublisher instead."
    hasPublisher: String @deprecated(reason : "Use filter.hasPublisher instead")
  ): CollectionPage! @deprecated(reason : "Use query shows() instead.")
  documentPage(after: String, filter: DocumentFilterInput, first: Int! @constraint(max : 500) @constraint(min : 1)): DocumentPage! @deprecated(reason : "Use query articles() instead.")
  dopeSheetPage(after: String, filter: DopeSheetFilterInput, first: Int! @constraint(max : 500) @constraint(min : 1)): DopeSheetPage!
  programmePage(
    "The cursor of the previous page."
    after: String,
    """
    The returned page will contain only programmes that match all filters. Only
    filters with values affect the result. If you don't want to filter at all, then 
    you can set this field to null.
    """
    filter: ProgrammeFilterInput,
    "The number of programmes per page."
    first: Int! @constraint(max : 500) @constraint(min : 1),
    "Deprecated: use filter.hasProvenance instead."
    hasProvenance: EbucoreProvenance @deprecated(reason : "use filter.hasProvenance instead"),
    "Deprecated: use filter.isMemberOf instead."
    isMemberOf: String @deprecated(reason : "use filter.isMemberOf instead")
  ): ProgrammePage!
  "Returns the show with the provided PDP id or null if it does not exist."
  show(
    "A PDP id of a show."
    id: String!
  ): Show
  "Returns shows matching the filter criteria."
  shows(
    "The cursor of the previous page. Set to null to get the first page."
    after: String,
    """
    The returned page will contain only shows that match all filters. Only
    filters with values affect the result. If you don't want to filter at all, then 
    you can set this field to null.
    """
    filter: ShowFilterInput,
    "The number of programmes per page."
    first: Int! @constraint(max : 500) @constraint(min : 1)
  ): ShowPage!
}

"Describes rights and restrictions associated with an asset."
type Rights {
  "The date and time (expressed as timestamp) from when the asset is available for public use. (ISO-8601)"
  availableFrom: DateTime
  "The date and time (expressed as timestamp) until when the asset is available for public use. (ISO-8601)"
  availableTo: DateTime
  "An agent (contact, person or organisation) having or managing the rights to an asset."
  rightsHolder: RightsHolder
  "Expresses usage rights."
  usageRights: [String]!
}

type RightsEbucore {
  hasRightsHolder: String
}

"An agent (contact, person or organisation) having or managing the rights to an asset."
type RightsHolder {
  "Name of the rights holder."
  name: String!
}

"A role of a person in the context of an asset."
type Role {
  "The type of the role, e.g. \"Producer\" or \"Editor\"."
  name: String!
}

"""
A schedule defines a repeating time period used to describe a regularly 
occurring episode. At a minimum a schedule will specify a startDate and a
repeatFrequency which describes the interval between occurrences of the
episodes. Additional information can be provided to specify the schedule more
precisely. This includes identifying the day(s) of the week or month when the 
recurring episode is broadcast. Schedules may also have an end date to indicate
when they are active, e.g. to define a limited calendar of events.
"""
type Schedule {
  "Alternative identifiers from the source system."
  alternativeIdentifiers: [AlternativeIdentifier]!
  "Defines the day(s) of the week on which episodes of the show are scheduled."
  byDay: [DayOfWeek]!
  "Defines the month(s) of the year on which episodes of the show are scheduled."
  byMonth: [Month]!
  """
  Defines the day(s) of the month on which episodes of the show are scheduled.
  Specified as an Integer between 1-31.
  """
  byMonthDay: [Int]!
  """
  Defines the week(s) of the month on which episodes of the show are scheduled.
  Specified as an Integer between 1-5. For clarity, byMonthWeek is best used in
  conjunction with byDay to indicate concepts like the first and third Mondays of
  a month.
  """
  byMonthWeek: [Int]!
  "The duration of a single episode in the show in milliseconds."
  duration: BigInteger
  "The end date and time of an episode of the show. (ISO-8601)"
  end: DateTime
  """
  Defines Dates or DateTimes during which a scheduled episode will not take place.
  The property allows exceptions to a schedule to be specified. If an exception is
  specified as a DateTime then only the event that would have started at that
  specific date and time should be excluded from the schedule. If an exception is
  specified as a Date then any event that is scheduled for that 24 hour period
  should be excluded from the schedule. This allows a whole day to be excluded
  from the schedule without having to itemise every scheduled event. (ISO-8601)
  """
  exceptions: [DateTime]!
  "Set to true when the schedule contains first showings, set to false when it contains repeat showings."
  isFirstShowing: Boolean!
  publicationChannel: Channel
  """
  Defines the frequency at which episodes will occur according to a schedule.
  The intervals between episodes should be defined as a duration of time.
  """
  repeatFrequency: Frequency
  "The start date and time of an episode of the show. (ISO-8601)"
  start: DateTime!
}

"""
A show is a broadcasting container to which a specific episode belongs and
which is used to group individual broadcasts. An example of a show is
"10 vor 10" or "Echo der Zeit".
"""
type Show {
  """
  An abstract is a self-contained, brief, and meaningful description of a show. 
  In contrast to the "description", the "abstract" is about a description of
  the asset that is as complete as possible.
  """
  abstract: Text
  "Alternative identifiers from other systems."
  alternativeIdentifiers: [AlternativeIdentifier]!
  "In the context of the PDP, this field is used to indicate whether the data may be published publicly."
  confidentialityLevel: ConfidentialityLevel!
  "A general description of a show."
  description: Text
  "The genres this show belongs to."
  genres: [Genre]!
  "The PDP id."
  id: String!
  "The source system publishing the metadata."
  provenance: Provenance!
  "The business unit or external organisation publishing the metadata."
  publisher: Publisher!
  "Pictures associated with the show."
  relatedPictures: [Picture]!
  "A schedule defines a repeating time period used to describe a regularly occurring planned publication."
  schedules: [Schedule]!
  "The title or name given to the show."
  title: Text!
}

type ShowPage {
  cursor: String
  edges: [Show]!
}

"A team is a group of clearly identifiable and organizationally related actors who are jointly involved in the creation process of an editorial object. An example of a team is the editorial team of \"Regionaljournal Ostschweiz\"."
type Team implements Agent {
  "The name of the team."
  name: String!
}

"Represents a human readable text for a corresponding asset."
type Text {
  "The content of the text."
  content: String!
}

"A topic addressed by an episode, clip or article."
type Topic {
  "The name of the topic."
  name: Text!
}

"A Uniform Resource Locator referencing a resource."
type URL {
  "The URL."
  url: String!
}

enum AccessConditionEbucore {
  "Assets with this access condition must be made available only to authenticated SRG SSR employees or services."
  GD_G_PDP_Intern
  "Assets with this access condition can be made available to everyone."
  GD_G_PDP_Public
  "The access condition for this asset is unknown. Assume the most restrictive access condition applies."
  Unknown
}

enum AssetType {
  Audio
  Unknown
  Video
}

enum ConfidentialityLevel {
  C1_Public
  C2_Internal
  Unknown
}

"A day of the week."
enum DayOfWeek {
  Friday
  Monday
  Saturday
  Sunday
  Thursday
  Tuesday
  Unknown
  Wednesday
}

enum DistributionVector {
  Online
  Radio
  TV
  Unknown
}

enum EbucoreProvenance {
  AIS
  Archive
  CMS
  Digas
  MOVEit
  OfferPortfolio
  OpenMedia
  Play
  PlaySuisse
  Unknown
}

enum FormatType {
  DigitalFile
  PhysicalMedia
  Unknown
}

"A month of the year."
enum Month {
  April
  August
  December
  February
  January
  July
  June
  March
  May
  November
  October
  September
  Unknown
}

"The source system publishing the metadata."
enum Provenance {
  AIS
  Archive
  CMS
  Digas
  MOVEit
  OfferPortfolio
  OpenMedia
  Play
  PlaySuisse
  Unknown
  WhatsOn
}

enum ProvenanceType {
  AIS
  Archive
  CMS
  Digas
  MOVEit
  MoveIT
  OfferPortfolio
  OpenMedia
  Play
  PlaySuisse
  Unknown
}

enum PubStatus {
  Published
  Unknown
  Unpublished
}

"""
The business unit or external organisation publishing the metadata.
Please contact the PDP team if a publisher is missing.
"""
enum Publisher {
  AP
  NZZ
  PZBundeshaus
  RSI
  RTR
  RTS
  SRF
  SWI
  Unknown
}

"Scalar for BigDecimal"
scalar BigDecimal

"Scalar for BigInteger"
scalar BigInteger

"Scalar for DateTime"
scalar DateTime

"The returned page will contain only articles that match all filters. Only filters with values affect the result."
input ArticleFilterInput {
  "Filters articles with an id or alternative identifier matching any of the provided identifiers."
  identifiers: [String]
  "Filters articles depending on their provenance."
  provenance: Provenance
  "Filters articles depending on their publisher."
  publisher: Publisher
  """
  Filters articles depending on when they were updated. An article counts as
  updated when either the source system changes its data or a relation to another
  asset is modified.
  """
  updated: TemporalFilterInput
}

input CollectionFilterInput {
  hasProvenance: EbucoreProvenance
  hasPublisher: String
}

input DocumentFilterInput {
  hasProvenance: EbucoreProvenance
  hasPublisher: String
  """
  Filter documents depending on when they were updated. A document counts as
  updated when either the source system changes its data or a relation to another
  asset is modified. Note: the field "dateModified" is set by the source system 
  and only changes when the source system changes the document's data, not when
  PDP modifies a relation to another asset.
  """
  updated: TemporalFilterInputEbucore
}

input DopeSheetFilter {
  "Possible types: Unknown, Archive, CMS, Play, PlaySuisse, MoveIT"
  hasProvenance: ProvenanceType
  hasPublisher: String
  hasType: String
  identifierType: String
  identifierValue: String
}

input DopeSheetFilterInput {
  "Filter by specific alternative identifiers and optionally specifier the alternative identifier type"
  alternativeIdentifiers: [DopeSheetFilter]
  hasProvenance: EbucoreProvenance
  hasPublisher: String
  "Filter for primary identifiers as well as alternative identifiers"
  identifier: String
  """
  Filter DopeSheets depending on when they were updated. A DopeSheet counts as
  updated when either the source system changes its data or a relation to another
  asset is modified. Note: the field "dateModified" is set by the source system 
  and only changes when the source system changes the document's data, not when
  PDP modifies a relation to another asset.
  """
  updated: TemporalFilterInputEbucore
}

input ProgrammeFilterInput {
  hasProvenance: EbucoreProvenance
  hasPublisher: String
  "Provide an identifier of a collection to filter for programmes belonging to that collection."
  isMemberOf: String
  """
  Filter programmes depending on when they were updated. A programme counts as
  updated when either the source system changes its data or a relation to another
  asset is modified. Note: the field "dateModified" is set by the source system 
  and only changes when the source system changes the programme's data, not when
  PDP modifies a relation to another asset.
  """
  updated: TemporalFilterInputEbucore
}

input ShowFilterInput {
  "Filters shows that have an id or alternative identifier that match any of the provided identifiers."
  identifiers: [String]
  "Filters shows depending on their provenance."
  provenance: Provenance
  "Filters shows depending on their publisher."
  publisher: Publisher
  """
  Filters shows depending on when they were updated. A show counts as
  updated when either the source system changes its data or a relation to another
  asset is modified.
  """
  updated: TemporalFilterInput
}

"""
A filter for a temporal field. If you provide a date-time for both the after and
before fields, the result will only contain items between those two date-times.
If you only provide one of the date-times, then the result  will contain all
items before or after the respective date-time. Both the after and the before 
date-time are exclusive, i.e. the result will not contain items with the exact 
same date-time.
"""
input TemporalFilterInput {
  """
  Provide an ISO-8601 date-time with an offset from UTC/Greenwich, such as 
  2022-07-18T10:15:30+02:00 to filter for items strictly after that date-time. (ISO-8601)
  """
  after: DateTime
  """
  Provide an ISO-8601 date-time with an offset from UTC/Greenwich, such as 
  2022-07-18T10:15:30+02:00 to filter for items strictly before that date-time. (ISO-8601)
  """
  before: DateTime
}

"""
A filter for a temporal field. If you provide a date-time for both the after and
before fields, the result will only contain items between those two date-times.
If you only provide one of the date-times, then the result  will contain all
items before or after the respective date-time. Both the after and the before 
date-time are exclusive, i.e. the result will not contain items with the exact 
same date-time.
"""
input TemporalFilterInputEbucore {
  """
  Provide an ISO-8601 date-time with an offset from UTC/Greenwich, such as 
  2022-07-18T10:15:30+02:00 to filter for items strictly after that date-time. (ISO-8601)
  """
  after: DateTime
  """
  Provide an ISO-8601 date-time with an offset from UTC/Greenwich, such as 
  2022-07-18T10:15:30+02:00 to filter for items strictly before that date-time. (ISO-8601)
  """
  before: DateTime
}

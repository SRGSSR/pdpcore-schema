schema {
  query: Query
}

"Indicates a Bean Validation constraint"
directive @constraint(format: String, max: BigInteger, maxFloat: BigDecimal, maxLength: Int, min: BigInteger, minFloat: BigDecimal, minLength: Int, pattern: String) repeatable on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @deprecated(reason: String) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"""
Marks the definition as experimental with an optional reason.
Experimental API must not be used for production use as it can change
or be removed at any time without notice.
"""
directive @experimental(reason: String) on QUERY | MUTATION | SUBSCRIPTION

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

"An agent represents a person, team or department."
interface Agent {
  "The name of the agent."
  name: String!
}

"An asset that can be the source of a clip."
union ClipSource = Clip | Episode

"An article is a website (CMS) article."
type Article {
  """
  An abstract is a self-contained, brief, and meaningful description of an article. In contrast to the 
  "description", the "abstract" is about a description of the asset that is as complete as possible.
  """
  abstract: Text
  "In the context of the PDP, this field is used to indicate whether the data may be published publicly."
  confidentialityLevel: ConfidentialityLevel!
  "The full text of the article."
  content: ArticleContent
  "People, teams or departments who contributed to the article."
  contributors: [Agent]
  "The genres this article belongs to."
  genres: [Genre]
  "The PDP id of the article."
  id: String!
  "This field indicates whether the article is longer or more extensive."
  isLongForm: Boolean
  """
  A kicker is a short topic information, which is usually placed above the actual title and
  allows the user to see at a glance what an article is about.
  """
  kicker: Text
  "The date and time (expressed as timestamp) at which the article was modified. (ISO-8601)"
  modifiedAt: DateTime
  "The source system publishing the metadata."
  provenance: Provenance!
  "Indicates if the website article has been published online."
  publicationStatus: PublicationStatus
  "The business unit or external organisation publishing the metadata."
  publisher: Publisher!
  "Other articles related to this article."
  relatedArticles: [Article]
  "Clips related to the article."
  relatedClips: [Clip]
  "Episodes related to this article."
  relatedEpisodes: [Episode]
  "Pictures related to the article."
  relatedPictures: [Picture]
  "The date and time (expressed as timestamp) at which the article was produced. (ISO-8601)"
  releasedAt: DateTime
  "The id of the article in the source system. It is unique in the source system, but not globally."
  sourceId: String!
  "The title or name given to the article."
  title: Text
  "The URL from where the article can be accessed."
  url: URL
}

"The text content of an article."
type ArticleContent {
  "The complete, unformatted text of the article. The text should not contain any HTML tags or similar."
  text: [String]!
}

"A page containing articles matching the query filters."
type ArticlePage {
  cursor: String
  edges: [Article]!
}

"The aspect ratio of an asset."
type AspectRatio {
  "The aspect ratio, e.g. 16:9 or 4:3."
  ratio: String!
}

"An audio recording format for a media resource."
type AudioEncodingFormat {
  "The name of the format."
  name: String!
}

"An audio track is the soundtrack that belongs to a digital or analog media object."
type AudioTrack {
  "An ISO 639-1 two character language code, e.g. de, fr, it, rm."
  language: Language
  "The name of the track."
  name: String
  "The track type of the audio track, e.g. \"Stereo\", \"Mono\", \"Dolby\". "
  trackType: String
}

"A channel is a linear and non-linear broadcast vector for episodes, such as SRF1, RTSUn or PlaySuisse."
type Channel {
  "In the context of the PDP, this field is used to indicate whether the data may be published publicly."
  confidentialityLevel: ConfidentialityLevel!
  "Specifies the distribution vector of a channel."
  distributionVector: DistributionVector
  "The PDP id of the channel."
  id: String!
  "The name of the channel."
  name: String
  "The source system publishing the metadata."
  provenance: Provenance!
  "The business unit or external organisation publishing the metadata."
  publisher: Publisher!
  "Images associated with the channel."
  relatedImages: [Image]
  "The id of the channel in the source system. It is unique in the source system, but not globally."
  sourceId: String!
}

"A page containing clips matching the query filters."
type ChannelPage {
  cursor: String
  edges: [Channel]!
}

"A clip is a single editorial (audiovisual) contribution. A clip can be part of an episode or stand alone."
type Clip {
  """
  An abstract is a self-contained, brief, and meaningful description of a clip. In contrast to the 
  "description", the "abstract" is about a description of the asset that is as complete as possible.
  """
  abstract: Text
  " The date and time (expressed as timestamp) when the clip was archived. (ISO-8601)"
  archivedAt: DateTime
  "Defines the media type of the clip."
  assetType: AssetType!
  "Comments about the clip from the source system (not from a user). "
  comments: [Comment]
  "In the context of the PDP, this field is used to indicate whether the data may be published publicly."
  confidentialityLevel: ConfidentialityLevel!
  "People, teams or departments who contributed to the clip."
  contributors: [Agent]
  "The episode or clip from which this clip is derived."
  derivedFrom: ClipSource
  "A general description of the clip."
  description: Text
  "The URL from where the article can be accessed."
  distributionType: DistributionType
  "The duration of the clip in milliseconds."
  duration: BigInteger
  "End point relative to the episode's start in milliseconds."
  end: BigInteger
  "The genres this clip belongs to."
  genres: [Genre]
  "The PDP id of the clip."
  id: String!
  """
  An EditorialGrouping is defined as a marketing tool to promote
  selected content to one or several audiences on a specific platform.
  """
  includedIn: [EditorialGrouping]
  "Media resources (digital files or physical medias) instantiating the clip."
  instances: [MediaResource]
  "An ISO 639-1 two character language code, e.g. de, fr, it, rm."
  language: Language
  "Used to further specify the audiovisual asset type."
  mediaType: MediaType!
  "The date and time (expressed as timestamp) at which the clip was modified. (ISO-8601)"
  modifiedAt: DateTime
  "The episode this clip belongs to"
  parentEpisode: Episode
  "A \"Part\" is used to describe and subdivide the clip in more detail. A clip is an intellectual unit which is published. A \"Part\", on the other hand, is (rather) a potentially independent selection (for content indexing and/or internal purposes) and is correspondingly less relevant for media consumers."
  parts: [Part]
  "The position of the clip in an ordered group (e.g. an episode)."
  position: Int
  "The date and time (expressed as timestamp) at which the clip was produced. (ISO-8601)"
  producedAt: DateTime
  "This field indicates what type of production (e.g.: in-house production, third-party production) is involved."
  productionTypes: [ProductionType]
  "The source system publishing the metadata."
  provenance: Provenance!
  "The business unit or external organisation publishing the metadata."
  publisher: Publisher!
  "Other clips related to this clip."
  relatedClips: [Clip]
  "The events, real or fictional, covered by the clip."
  relatedEvents: [Event]
  "The locations, real or fictional, covered by the clip."
  relatedLocations: [Location]
  "Pictures related to the clip."
  relatedPictures: [Picture]
  "Rights and restrictions associated to the clip."
  rights: [Rights]
  "The id of the clip in the source system. It is unique in the source system, but not globally."
  sourceId: String!
  "Start point relative to the episode's start in milliseconds."
  start: BigInteger
  "The title or name given to the clip."
  title: Text
  "The topic(s) addressed by the clip."
  topics: [Topic]
  "The URL from where the article can be accessed."
  url: URL
}

"A page containing clips matching the query filters."
type ClipPage {
  cursor: String
  edges: [Clip]!
}

"A colour space of a media resource."
type ColourSpace {
  "The name of the color space."
  name: String!
}

"A comment about an asset from the source system. Attention: these are not user comments!"
type Comment {
  "The text of the comment."
  text: String!
}

"A department describes an organizational unit in the form of a department that is responsible for the editorial creation process of an audiovisual object. An example of an organizational unit is \"Culture\" or \"Sports\"."
type Department implements Agent {
  "The name of the department."
  name: String!
}

"""
An EditorialGrouping is defined as a marketing tool to promote selected
content to one or several audiences on a specific platform.
"""
type EditorialGrouping {
  "In the context of the PDP, this field is used to indicate whether the data may be published publicly."
  confidentialityLevel: ConfidentialityLevel!
  "The PDP id of the editorial grouping."
  id: String!
  "The source system publishing the metadata."
  provenance: Provenance!
  "The business unit or external organisation publishing the metadata."
  publisher: Publisher!
  "The id of the channel in the editorial grouping system. It is unique in the source system, but not globally."
  sourceId: String!
  "The title or name given to the editorial grouping."
  title: Text
  "This fields indicates the type of the editorial grouping."
  type: EditorialGroupingType!
}

"""
An episode is a longer and clearly identifiable editorial broadcast which
can consist of several individual contributions ("clips") (e.g.: Tagesschau of 
20.04.2020) or has a thematically coherent context (e.g.: DOK film about the
Generalsteik 1918).
"""
type Episode {
  """
  An abstract is a self-contained, brief, and meaningful description of
  an episode. In contrast to the "description", the "abstract" is about a
  description of the asset that is as complete as possible.
  """
  abstract: Text
  "The date and time (expressed as timestamp) when the episode was archived. (ISO-8601)"
  archivedAt: DateTime
  assetType: AssetType!
  """
  The date and time (expressed as timestamp) when the episode was first
  broadcast publicly on television, radio or via streaming. (ISO-8601)
  """
  broadcastAt: DateTime
  "Comments about the episode from the source system (not from a user)."
  comments: [Comment]
  "In the context of the PDP, this field is used to indicate whether the data may be published publicly."
  confidentialityLevel: ConfidentialityLevel!
  "People, teams or departments who contributed to the episode."
  contributors: [Agent]
  "A general description of an episode."
  description: Text
  "Specifies the distribution type of the episode."
  distributionType: DistributionType
  "The duration of the episode in milliseconds."
  duration: BigInteger
  "The episode number in a season."
  episodeNumberInSeason: Int
  "The genres this episode belongs to."
  genres: [Genre]
  "The PDP id of the episode."
  id: String!
  """
  An EditorialGrouping is defined as a marketing tool to promote
  selected content to one or several audiences on a specific platform.
  """
  includedIn: [EditorialGrouping]
  "Media resources (digital files or physical medias) instantiating the episode."
  instances: [MediaResource]
  "An ISO 639-1 two character language code, e.g. de, fr, it, rm."
  language: Language
  "The broadcasting container to which a specific episode belongs."
  memberOf: Show
  "The date and time (expressed as timestamp) at which the episode was modified. (ISO-8601)"
  modifiedAt: DateTime
  """
  A part is used to describe and subdivide individual contributions 
  ("Clip") or episodes (\"Episode\") in more detail. A clip is an intellectual
  unit which is published. A part, on the other hand, is (rather) a potentially
  independent selection (for content indexing and/or internal purposes) and is
  correspondingly less relevant for media consumers.
  """
  parts: [Part]
  "The position of the episode in an ordered group (e.g. a show)."
  position: Int
  "The date and time (expressed as timestamp) when the episode was produced. (ISO-8601)"
  producedAt: DateTime
  "This field indicates what type of production (e.g.: in-house production, third-party production) is involved."
  productionTypes: [ProductionType]
  "The source system publishing the metadata."
  provenance: Provenance!
  "The business unit or external organisation publishing the metadata."
  publisher: Publisher!
  """
  Other episodes related to this episode. Use this field if you have
  multiple distribution-versions (like VOD and HbbTV) of the same episode in your
  source system.
  """
  relatedEpisodes: [Episode]
  "The events, real or fictional, covered by the episode."
  relatedEvents: [Event]
  "The locations, real or fictional, covered by the episode."
  relatedLocations: [Location]
  "Pictures related to the episode."
  relatedPictures: [Picture]
  "Rights and restrictions associated to the episode."
  rights: [Rights]
  "Specific publication events of the episode, either in the future or the past."
  scheduledOn: [PublicationEvent]
  "Position of the season within an ordered group of seasons."
  seasonNumber: Int
  "The id of the episode in the source system. It is unique in the source system, but not globally."
  sourceId: String!
  "A short piece of text used to illustrate a thought or dramatic effect."
  tagline: Text
  "The title or name given to the episode."
  title: Text
  "The topic(s) addressed by the episode."
  topics: [Topic]
  "The URL from where the episode can be accessed, e.g. the Play Suisse URL."
  url: URL
}

"A page containing episodes matching the query filters."
type EpisodePage {
  cursor: String
  edges: [Episode]!
}

"An event, real or fictional, covered by an asset."
type Event {
  "The name of the event, e.g. \"1. August celebration\" or \"Fête des vignerons 2019\"."
  name: Text!
}

"""
The genre is used to classify audiovisual objects depending on their 
content into subject areas such as "Culture", "Sports", "News" or "Economy".
"""
type Genre {
  "A general description of the genre."
  description: Text
  "The preferred lexical label for a genre, in a given language."
  name: Text!
}

"Describes visual material - such as logos, thumbnails or other visual elements - that belong to an asset."
type Image {
  "Copyright information"
  copyright: String
  "The title or name given to the image."
  titles: [Text]
  "Rights and restrictions associated to the image."
  usage: String
  "The various sizes available"
  variants: [ImageVariant]!
}

type ImageVariant {
  "The aspect ratio of the image, e.g. 16:9 or 4:3."
  aspectRatio: AspectRatio
  "The height of the image in pixels."
  height: Int
  "Rights and restrictions associated to the image."
  usage: String
  "The width of the image in pixels."
  width: Int
}

"A geographical location, real or fictional, covered by an episode, clip or article."
type Location {
  "The name of the location, e.g. \"Berne\" or \"Narnia\"."
  name: Text!
}

"A topic addressed by an episode, clip or article."
type MediaResource {
  "The aspect ratio of a video-asset, e.g. 16:9 or 4:3."
  aspectRatio: AspectRatio
  "The audio encoding format of the media resource."
  audioEncodingFormat: AudioEncodingFormat
  "Comments about the media resource from the source system (not from a user). "
  audioTracks: [AudioTrack]
  "The colour space of the media resource."
  colourSpace: ColourSpace
  "Comments about the media resource from the source system (not from a user). "
  comments: [Comment]
  "End point relative to the episode's or clip's start in milliseconds."
  end: BigInteger
  "An ISO 639-1 two character language code, e.g. de, fr, it, rm."
  language: Language
  "Whether the media resource is digital or physical."
  mediaResourceType: MediaResourceType
  "The medium on which the media resource is stored."
  medium: Medium
  "The date and time (expressed as timestamp) at which the media resource was migrated. (ISO-8601)"
  migratedAt: DateTime
  "The date and time (expressed as timestamp) at which the media resource was modified. (ISO-8601)"
  modifiedAt: DateTime
  "The date and time (expressed as timestamp) at which the media resource was produced. (ISO-8601)"
  producedAt: DateTime
  "Start point relative to the episode's or clip's start in milliseconds."
  start: BigInteger
  "The URL from where the media resource can be accessed."
  url: URL
  "The video encoding format of the media resource."
  videoEncodingFormat: VideoEncodingFormat
}

"A medium on which a media resource is stored."
type Medium {
  "The name of the medium, e.g. \"8mm film\" or \"mpeg file\"."
  name: String!
}

"A part is used to describe and subdivide individual contributions (\"Clip\") or episodes (\"Episode\") in more detail. A clip is an intellectual unit which is published. A part, on the other hand, is (rather) a potentially independent selection (for content indexing and/or internal purposes) and is correspondingly less relevant for media consumers."
type Part {
  "The date and time (expressed as timestamp) when the part was archived. (ISO-8601)"
  archivedAt: DateTime
  "A general description of the part."
  description: Text
  "The duration of the part in milliseconds."
  duration: BigInteger
  "End point relative to the episode's or clip's start in milliseconds."
  end: BigInteger
  "The date and time (expressed as timestamp) at which the part was modified. (ISO-8601)"
  modifiedAt: DateTime
  "The events, real or fictional, covered by the part."
  relatedEvents: [Event]
  "The locations, real or fictional, covered by the part."
  relatedLocations: [Location]
  "Start point relative to the episode's or clip's start in milliseconds."
  start: BigInteger
  "The name of the topic."
  title: Text
}

"A person is a clearly identifiable human actor who is involved in the creation of an editorial object."
type Person implements Agent {
  "The full name of the person."
  name: String!
  "The role(s) the person takes in relation to the asset."
  roles: [Role]
}

"Describes visual material - such as logos, thumbnails or other visual elements - that belong to an asset."
type Picture {
  "The aspect ratio of the picture, e.g. 16:9 or 4:3."
  aspectRatio: AspectRatio
  "The height of the picture in pixels."
  height: Int
  "Rights and restrictions associated to the picture."
  rights: [Rights]
  "The title or name given to the picture."
  title: Text
  "The URL from where the picture can be accessed."
  url: URL!
  "The width of the picture in pixels."
  width: Int
}

"The type of the production."
type ProductionType {
  "The name of the production type, e.g. \"in-house production\", \"third-party production\"."
  type: String
}

"Describes how a show is planned to be published on a specific channel"
type Publication {
  "The brief descriptions of the show in potentially different languages."
  exclusions: [String]
  "The brief descriptions of the show in potentially different languages."
  schedules: [Schedule]
}

"Describes a specific date and time in which an episode was or will be published."
type PublicationEvent {
  "The channel on which the episode was or will be published."
  publicationChannel: Channel
  """
  The date and time (expressed as timestamp) at which the episode is
  scheduled to end or after which content is no longer available, accessible or consumable. (ISO-8601)
  """
  publicationEnd: DateTime
  """
  The date and time (expressed as timestamp) at which the episode is
  scheduled to start or when content is made available, can be accessed or consumed. (ISO-8601)
  """
  publicationStart: DateTime
}

"Query root"
type Query {
  "Returns the article with the provided PDP id or null if it does not exist."
  article(
    "A PDP id of an article."
    id: String!
  ): Article
  """
  **Experimental, do not use in production!**
  This query might be changed or removed at any time without notice.
  
  Lists the available article genres.
  """
  articleGenres(
    """
    The returned list will contain only genres that match all filters. Only
    filters with values affect the result. If you don't want to filter at all, then 
    you can set this field to null.
    """
    filter: ArticleGenreFilterInput
  ): [Genre]! @experimental
  "Returns articles matching the filter criteria."
  articles(
    "The cursor of the previous page. Set to null to get the first page."
    after: String,
    """
    The returned page will contain only articles that match all filters. Only
    filters with values affect the result. If you don't want to filter at all, then 
    you can set this field to null.
    """
    filter: ArticleFilterInput,
    "The number of articles per page."
    first: Int! @constraint(max : 500) @constraint(min : 1),
    "Specifies the order in which the query returns matching articles."
    sort: [ArticleSortInput] = []
  ): ArticlePage!
  "Returns the channel with the provided PDP id or null if it does not exist."
  channel(
    "A PDP id of a channel."
    id: String!
  ): Channel
  "Returns channels matching the filter criteria."
  channels(
    "The cursor of the previous page. Set to null to get the first page."
    after: String,
    """
    The returned page will contain only channels that match all filters. Only
    filters with values affect the result. If you don't want to filter at all, then 
    you can set this field to null.
    """
    filter: ChannelFilterInputInput,
    "The channels of channels per page."
    first: Int! @constraint(max : 500) @constraint(min : 1)
  ): ChannelPage!
  "Returns the clip with the provided PDP id or null if it does not exist."
  clip(
    "A PDP id of a clip."
    id: String!
  ): Clip
  "Returns clips matching the filter criteria."
  clips(
    "The cursor of the previous page. Set to null to get the first page."
    after: String,
    """
    The returned page will contain only clips that match all filters. Only
    filters with values affect the result. If you don't want to filter at all, then 
    you can set this field to null.
    """
    filter: ClipFilterInput,
    "The number of clips per page."
    first: Int! @constraint(max : 500) @constraint(min : 1)
  ): ClipPage!
  "Returns the show with the provided PDP id or null if it does not exist."
  episode(
    "A PDP id of an episode."
    id: String!
  ): Episode
  "Returns episodes matching the filter criteria."
  episodes(
    "The cursor of the previous page. Set to null to get the first page."
    after: String,
    """
    The returned page will contain only episodes that match all filters. Only
    filters with values affect the result. If you don't want to filter at all, then 
    you can set this field to null.
    """
    filter: EpisodeFilterInput,
    "The number of episodes per page."
    first: Int! @constraint(max : 500) @constraint(min : 1)
  ): EpisodePage!
  """
  **Experimental, do not use in production!**
  This query might be changed or removed at any time without notice.
  
  Full text search for articles.
  """
  searchArticles(
    "The number of articles."
    first: Int = 10 @constraint(max : 500) @constraint(min : 1),
    "The language of the words used in the search query."
    language: TextSearchLanguage = none,
    "The search query."
    query: String!
  ): [Article]! @experimental
  "Returns the show with the provided PDP id or null if it does not exist."
  show(
    "A PDP id of a show."
    id: String!
  ): Show
  "Returns shows matching the filter criteria."
  shows(
    "The cursor of the previous page. Set to null to get the first page."
    after: String,
    """
    The returned page will contain only shows that match all filters. Only
    filters with values affect the result. If you don't want to filter at all, then 
    you can set this field to null.
    """
    filter: ShowFilterInput,
    "The number of shows per page."
    first: Int! @constraint(max : 500) @constraint(min : 1)
  ): ShowPage!
}

"Describes rights and restrictions associated with an asset."
type Rights {
  "The date and time (expressed as timestamp) from when the asset is available for public use. (ISO-8601)"
  availableFrom: DateTime
  "The date and time (expressed as timestamp) until when the asset is available for public use. (ISO-8601)"
  availableTo: DateTime
  "An agent (contact, person or organisation) having or managing the rights to an asset."
  rightsHolder: RightsHolder
  "Expresses usage rights."
  usageRights: [String]
}

"An agent (contact, person or organisation) having or managing the rights to an asset."
type RightsHolder {
  "Name of the rights holder."
  name: String!
}

"A role of a person in the context of an asset."
type Role {
  "The type of the role, e.g. \"Producer\" or \"Editor\"."
  name: String!
}

"""
A schedule defines a repeating time period used to describe a regularly
occurring episode. With the provided metadata fields, you are able to define the
schedule. The section "Schema Concepts: Show Schedules" in the PDP API
documentation goes into more details and provides a few example schedules.
"""
type Schedule {
  "Defines the day(s) of the week on which episodes of the show are scheduled."
  byDay: [ByDay]
  "Defines the month(s) of the year on which episodes of the show are scheduled."
  byMonth: [ByMonth]
  """
  Defines the day(s) of the month on which episodes of the show are scheduled. 
              |Specified as an integer between 1-31.
  """
  byMonthDay: [Int]
  """
  Defines the week(s) of the month on which episodes of the show are scheduled. 
              |Specified as an integer between 1-5. For clarity, 
              |byMonthWeek is best used in conjunction with byDay to indicate concepts like 
              |the first and third Mondays of a month.
  """
  byMonthWeek: [Int]
  "The duration of a single episode in the show in milliseconds."
  duration: BigInteger
  "The start date and time of the last episode of the show in ISO 8601 format `YYYY-MM-DDThh:mm:ss.sss[Z|±hh:mm]`."
  end: String
  firstShowing: Boolean
  "Defines the frequency at which episodes will occur according to a schedule. The intervals between episodes should be defined as a duration of time"
  repeatFrequency: ScheduleRepeatFrequency
  "The start date of an episode of the show in ISO 8601 calendar date format `YYYY-MM-DD`."
  startDate: String
  "The start time of an episode of the show in ISO 8601 time format `hh:mm:ss.sss[Z|±hh:mm]`."
  startTime: String
}

"""
Defines the frequency at which episodes will occur according to a schedule. 
        |The intervals between episodes should be defined as a duration of time.".
"""
type ScheduleRepeatFrequency {
  days: Int
  minutes: Int
  months: Int
  weeks: Int
}

"""
A show is a broadcasting container to which a specific episode belongs and
which is used to group individual broadcasts. An example of a show is
"10 vor 10" or "Echo der Zeit".
"""
type Show {
  "In the context of the PDP, this field is used to indicate whether the data may be published publicly."
  confidentialityLevel: ConfidentialityLevel!
  "The detailed descriptions of the show in potentially different languages."
  description: [Text]
  "The PDP id of the show."
  id: String!
  "The brief descriptions of the show in potentially different languages."
  lead: [Text]
  "The source system publishing the metadata."
  provenance: Provenance!
  "Defines the schedules describing the regularly occurring planned publications."
  publications: [Publication]
  "The business unit or external organisation publishing the metadata."
  publisher: Publisher!
  "The id of the show in the source system. It is unique in the source system, but not globally."
  sourceId: String!
  "The titles for the show in potentially different languages."
  title: [Text]
  "Website URL associated with the show."
  websiteUrl: URL
}

"A page containing shows matching the query filters."
type ShowPage {
  cursor: String
  edges: [Show]!
}

"A team is a group of clearly identifiable and organizationally related actors who are jointly involved in the creation process of an editorial object. An example of a team is the editorial team of \"Regionaljournal Ostschweiz\"."
type Team implements Agent {
  "The name of the team."
  name: String!
}

"Represents a human readable text for a corresponding asset."
type Text {
  "The content of the text."
  content: String!
}

"A topic addressed by an episode, clip or article."
type Topic {
  "The name of the topic."
  name: Text!
}

"A Uniform Resource Locator referencing a resource."
type URL {
  "The URL."
  url: String!
}

"An video recording format for a media resource."
type VideoEncodingFormat {
  "The name of the format."
  name: String!
}

"Specifies the fields that can be used to sort articles."
enum ArticleSortField {
  modifiedAt
  releasedAt
  updatedAt
}

"Specifies the type of an episode or a clip."
enum AssetType {
  Audio
  Unknown
  Video
}

"A day of the week."
enum ByDay {
  Friday
  Monday
  Saturday
  Sunday
  Thursday
  Tuesday
  Unknown
  Wednesday
}

"A month of the year."
enum ByMonth {
  April
  August
  December
  February
  January
  July
  June
  March
  May
  November
  October
  September
  Unknown
}

enum ConfidentialityLevel {
  C1_Public
  C2_Internal
  Unknown
}

"Specifies the type of an episode or a clip."
enum DistributionType {
  AudioOnDemand
  AudioPodcast
  Broadcast
  HbbTV
  LiveStream
  Unknown
  VideoOnDemand
  VideoPodcast
}

enum DistributionVector {
  Online
  Radio
  TV
  Unknown
}

"If you need another editorial grouping type, please contact the PDP team."
enum EditorialGroupingType {
  Playlist
  Swimlane
  Unknown
}

enum Language {
  Unknown
  aa
  ab
  ae
  af
  ak
  am
  an
  ar
  as
  av
  ay
  az
  ba
  be
  bg
  bi
  bm
  bn
  bo
  br
  bs
  ca
  ce
  ch
  co
  cr
  cs
  cu
  cv
  cy
  da
  de
  dv
  dz
  ee
  el
  en
  eo
  es
  et
  eu
  fa
  ff
  fi
  fj
  fo
  fr
  fy
  ga
  gd
  gl
  gn
  gu
  gv
  ha
  he
  hi
  ho
  hr
  ht
  hu
  hy
  hz
  ia
  id
  ie
  ig
  ii
  ik
  io
  is
  it
  iu
  ja
  jv
  ka
  kg
  ki
  kj
  kk
  kl
  km
  kn
  ko
  kr
  ks
  ku
  kv
  kw
  ky
  la
  lb
  lg
  li
  ln
  lo
  lt
  lu
  lv
  mg
  mh
  mi
  mk
  ml
  mn
  mr
  ms
  mt
  my
  na
  nb
  nd
  ne
  ng
  nl
  nn
  no
  nr
  nv
  ny
  oc
  oj
  om
  or
  os
  pa
  pi
  pl
  ps
  pt
  qu
  rm
  rn
  ro
  ru
  rw
  sa
  sc
  sd
  se
  sg
  si
  sk
  sl
  sm
  sn
  so
  sq
  sr
  ss
  st
  su
  sv
  sw
  ta
  te
  tg
  th
  ti
  tk
  tl
  tn
  to
  tr
  ts
  tt
  tw
  ty
  ug
  uk
  ur
  uz
  ve
  vi
  vo
  wa
  wo
  xh
  yi
  yo
  za
  zh
  zu
}

"Specifies whether the media resource is digital or physical."
enum MediaResourceType {
  DigitalFile
  PhysicalMedia
  Unknown
}

"Used to further specify the audiovisual asset type."
enum MediaType {
  Broadcast
  LiveStream
  Movie
  Podcast
  Series
  Trailer
  Unknown
}

"The source system publishing the metadata."
enum Provenance {
  AIS
  Archive
  CMS
  Digas
  MOVEit
  OfferPortfolio
  OpenMedia
  Play
  PlaySuisse
  Unknown
  WhatsOn
}

"The publication state of an article."
enum PublicationStatus {
  Published
  Unknown
  Unpublished
}

"""
The business unit or external organisation publishing the metadata.
Please contact the PDP team if a publisher is missing.
"""
enum Publisher {
  AP
  NZZ
  PZBundeshaus
  RSI
  RTR
  RTS
  SRF
  SWI
  SwissTXT
  Unknown
}

"Values for sorting."
enum SortOrder {
  "Sort ascending, nulls first."
  ASC
  "Sort descending, nulls last."
  DESC
}

"The supported languages for a full text search."
enum TextSearchLanguage {
  da
  de
  en
  es
  fi
  fr
  hu
  it
  nb
  nl
  none
  pt
  ro
  ru
  sv
  tr
}

"Scalar for BigDecimal"
scalar BigDecimal

"Scalar for BigInteger"
scalar BigInteger

"Scalar for DateTime"
scalar DateTime

"The returned page will contain only articles that match all filters. Only filters with values affect the result."
input ArticleFilterInput {
  "Filters articles by genre."
  genres: GenreFilterInput
  "Filters articles with an id or alternative identifier matching any of the provided identifiers."
  identifiers: [String]
  "Filters articles depending on the value of the field `isLongForm`."
  isLongForm: Boolean
  """
  Filters articles depending on the value of the field `modifiedAt`. If
  the source system did not set a timestamp, then the article will not be included
  if this filter is set.
  """
  modified: TemporalFilterInput
  "Filters articles depending on their provenance."
  provenance: Provenance
  "Filters articles depending on their publisher."
  publisher: Publisher
  """
  Filters articles depending on the value of the field `releasedAt`. If
  the source system did not set a timestamp, then the article will not be included
  if this filter is set.
  """
  released: TemporalFilterInput
  """
  Filters articles depending on when they were updated. An article counts as
  updated when either the source system changes its data or a relation to another
  asset is updated. Updates to related assets like episodes or clips are not taken
  into account.
  """
  updated: TemporalFilterInput
}

"""
The returned list will contain only article genres matching all filters.
Only filters with values affect the result.
"""
input ArticleGenreFilterInput {
  "Filters article genres depending on their provenance."
  provenance: Provenance
  "Filters article genres depending on their publisher."
  publisher: Publisher
}

"Defines a field and order to be used for sorting the articles."
input ArticleSortInput {
  "The field of the article you want to sort by."
  field: ArticleSortField!
  "The order in which want the articles sorted."
  order: SortOrder!
}

input ChannelFilterInputInput {
  "Filters channels matching any of the provided identifiers."
  identifiers: [String]
  "Filters channels depending on their provenance."
  provenance: Provenance
  "Filters channels depending on their publisher."
  publisher: Publisher
  """
  Filters channels depending on when they were updated. A channel counts as
  updated when either the source system changes its data or a relation to another
  asset is updated.
  """
  updated: TemporalFilterInput
}

"The returned page will contain only clips that match all filters. Only filters with values affect the result."
input ClipFilterInput {
  """
  Filters articles depending on the value of the field `archivedAt`. If
  the source system did not set a timestamp, then the clip will not be included
  if this filter is set.
  """
  archived: TemporalFilterInput
  "Filters clips with an id or alternative identifier matching any of the provided identifiers."
  identifiers: [String]
  """
  Filters clips depending on the value of the field `modifiedAt`. If
  the source system did not set a timestamp, then the clip will not be included
  if this filter is set.
  """
  modified: TemporalFilterInput
  "Filters clips depending on their parent episode. Provide the PDP ID of an episode to activate this filter."
  parentEpisode: String
  """
  Filters articles depending on the value of the field `producedAt`. If
  the source system did not set a timestamp, then the clip will not be included
  if this filter is set.
  """
  produced: TemporalFilterInput
  "Filters clips depending on their provenance."
  provenance: Provenance
  "Filters clips depending on their publisher."
  publisher: Publisher
  """
  Filters clips depending on when they were updated. A clip counts as
  updated when either the source system changes its data or a relation to another
  asset is updated. Updates to related assets like the clip's parent episode or
  its editorial groupings are not taken into account.
  """
  updated: TemporalFilterInput
}

input EpisodeFilterInput {
  """
  Filters episodes depending on when they were archived. Episodes 
  without a value for this field will be excluded.
  """
  archived: TemporalFilterInput
  """
  Filters episodes depending on when they were broadcast. Episodes 
  without a value for this field will be excluded.
  """
  broadcast: TemporalFilterInput
  "Filters episodes that have an id or alternative identifier that match any of the provided identifiers."
  identifiers: [String]
  "Filters episodes depending on their show's id."
  memberOf: String
  """
  Filters episodes depending on when they were modified in the source
  system. Episodes without a value for this field will be excluded. Use the 
  filter `updated` if you want a filter that includes all episodes.
  """
  modified: TemporalFilterInput
  """
  Filters episodes depending on when they were produced. Episodes 
  without a value for this field will be excluded.
  """
  produced: TemporalFilterInput
  "Filters episodes depending on their provenance."
  provenance: Provenance
  "Filters episodes depending on their publisher."
  publisher: Publisher
  """
  Filters episodes depending on when they were updated. An episode
  counts as updated when either the source system changes its data or a relation
  to another asset is modified. Updates to related assets like the episode's show
  or its editorial groupings are not taken into account.
  """
  updated: TemporalFilterInput
}

"""
A filter for genres. If you provide a value for this filter, then the 
result will contain any items that contains at least one matching genre.
"""
input GenreFilterInput {
  "Filters items by genre name."
  name: TextFilterInput
}

input ShowFilterInput {
  "Filters shows that have an id or alternative identifier that match any of the provided identifiers."
  identifiers: [String]
  "Filters shows depending on their provenance."
  provenance: Provenance
  "Filters shows depending on their publisher."
  publisher: Publisher
  """
  Filters shows depending on when they were updated. A show counts as
  updated when either the source system changes its data or a relation to another
  asset is modified. Updates to related assets like the show schedule's channel
  are not taken into account.
  """
  updated: TemporalFilterInput
}

"""
A filter for a temporal field. If you provide a date-time for both the after and
before fields, the result will only contain items between those two date-times.
If you only provide one of the date-times, then the result  will contain all
items before or after the respective date-time. Both the after and the before 
date-time are exclusive, i.e. the result will not contain items with the exact 
same date-time.
"""
input TemporalFilterInput {
  """
  Provide an ISO-8601 date-time with an offset from UTC/Greenwich, such as 
  2022-07-18T10:15:30+02:00 to filter for items strictly after that date-time. (ISO-8601)
  """
  after: DateTime
  """
  Provide an ISO-8601 date-time with an offset from UTC/Greenwich, such as 
  2022-07-18T10:15:30+02:00 to filter for items strictly before that date-time. (ISO-8601)
  """
  before: DateTime
}

"A filter for a text field."
input TextFilterInput {
  "Filters texts by content. The result will only contain texts matching the entire content exactly."
  content: String
}

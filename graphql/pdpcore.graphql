schema {
  query: Query
}

"Indicates a Bean Validation constraint"
directive @constraint(format: String, max: BigInteger, maxFloat: BigDecimal, maxLength: Int, min: BigInteger, minFloat: BigDecimal, minLength: Int, pattern: String) repeatable on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(reason: String) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"""
Marks the definition as experimental with an optional reason.
Experimental API must not be used for production use as it can change
or be removed at any time without notice.
"""
directive @experimental(reason: String) on QUERY | MUTATION | SUBSCRIPTION | FIELD_DEFINITION

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Indicates an Input Object is a OneOf Input Object."
directive @oneOf on INPUT_OBJECT

"Used to specify the role required to execute a given field or operation."
directive @rolesAllowed(value: String) on FIELD_DEFINITION

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

"An agent represents a person, team or department."
interface Agent {
  "The name of the agent."
  name: String!
}

"A resource used by an editorial object, e.g. a preview image for a programme or a document attached to an article."
interface Resource {
  description: [Text]
  name: [Text]
  url: URI
}

"Rights held by a rights holder"
interface Rights {
  "A person or entity holding the right"
  rightsHolder: RightsHolder
}

"The conditions under which content can be accessed."
type AccessCondition {
  "Indicates that the content can only be viewed after the given date and time. (ISO-8601)"
  availableFrom: DateTime
  "Indicates that the content can only be viewed until the given date and time. (ISO-8601)"
  availableTo: DateTime
  "Indicates that the content is blocked and why. (e.g. for legal reasons)"
  blockReason: String
  "The description of the access condition."
  description: [Text]
  "Indicates that the content cannot be embedded."
  embeddingDisabled: Boolean
  "Indicates that the content can only be viewed in the listed locations."
  geoBlockingWhitelist: [GeoBlockingLocation]
  "The name of the access condition."
  name: String!
}

"A CMS website article."
type Article {
  "The conditions under which content can be accessed."
  accessConditions: [AccessCondition]!
  "The full text of the article."
  content: ArticleContent
  "Involvements of People, teams or departments who contributed to the article."
  contributors: [Involvement]
  "Other articles with the same content."
  existsAs: [Article]
  "The genres this article belongs to."
  genres: [Genre]
  "The PDP id of the article."
  id: String!
  "This field indicates whether the article is longer or more extensive."
  isLongForm: Boolean
  "Keywords for this article"
  keywords: [String]
  "A line of newspaper type set above a title usually in a different typeface and intended to provoke interest in, editorialize about, or provide orientation for the matter in the copy heads. The kicker may be available in different languages."
  kicker: [Text]
  "A lead is a self-contained, brief, and meaningful description of an article. The lead may be available in different languages."
  lead: [Text]
  "The date and time (expressed as timestamp) at which the article was modified. (ISO-8601)"
  modifiedAt: DateTime
  "The source system publishing the metadata."
  provenance: Provenance!
  "Indicates if the website article has been published online."
  publicationStatus: PublicationStatus
  "The business unit or external organisation publishing the metadata."
  publisher: Publisher!
  "Other articles related to this article."
  relatedArticles: [Article]
  "The date and time (expressed as timestamp) at which the article was produced. (ISO-8601)"
  releasedAt: DateTime
  "Resources such as pictures or documents related to this article."
  resources: [Resource]
  "The id of the article in the source system. It is unique in the source system, but not globally."
  sourceId: String!
  "The source URL from where the article can be accessed in raw format."
  sourceUrl: URI
  "The title or headline of the article. The title may be available in different languages."
  title: [Text]
  "The permanent URL from where the article can be accessed."
  url: URI
  "The web or seo URL from where the article can be accessed"
  webUrl: URI
}

"The text content of an article."
type ArticleContent {
  "The complete, unformatted text of the article. The text should not contain any HTML tags or similar."
  text: [String]!
}

"A page containing articles matching the query filters."
type ArticlePage {
  cursor: String
  edges: [Article]!
}

"The aspect ratio of an asset."
type AspectRatio {
  "The aspect ratio, e.g. 16:9 or 4:3."
  ratio: String!
}

type AudioTrack {
  name: String!
}

"A Campaign defines a strategy for publishing content to a targeted Audience according to a PublicationPlan. Campaign strategies can be refined taking into account the analysis of the Resonance of related ConsumptionEvents (e.g. likes, downloads, etc). Campaigns can apply to a variety of broadcasting strategies e.g. advertising campaigns, promotional campaigns or else."
type Campaign {
  "The conditions under which content can be accessed."
  accessConditions: [AccessCondition]!
  "Involvements of People, teams or departments who contributed to the article."
  contributors: [Involvement]
  description: [Text]
  "The genres this article belongs to."
  genres: [Genre]
  "The PDP id of the campaign."
  id: String!
  "The source system publishing the metadata."
  provenance: Provenance!
  "The business unit or external organisation publishing the metadata."
  publisher: Publisher!
  "The id of the campaign in the source system. It is unique in the source system, but not globally."
  sourceId: String!
  "Unmapped values directly from the source system. These might change or vanish without notice."
  sourceValues(
    "The key(s) of the source values you want to load. All source values are returned when the value is null or an empty list."
    key: [String]
  ): [SourceValue]!
  "The title or headline of the article. The title may be available in different languages."
  title: [Text]
}

"A page containing campaigns matching the query filters."
type CampaignPage {
  cursor: String
  edges: [Campaign]!
}

type Collection {
  accessConditions: [AccessCondition]!
  collectionType: CollectionType
  description: [Text]
  "The PDP id of the collection."
  id: String!
  identifiers: [Identifier]!
  lead: [Text]
  memberOf: [Collection]
  "The source system publishing the metadata."
  provenance: Provenance!
  "The business unit or external organisation publishing the metadata."
  publisher: Publisher!
  resources: [Resource]
  "The id of the collection in the source system. It is unique in the source system, but not globally."
  sourceId: String!
  "Unmapped values directly from the source system. These might change or vanish without notice."
  sourceValues(
    "The key(s) of the source values you want to load. All source values are returned when the value is null or an empty list."
    key: [String]
  ): [SourceValue]!
  title: [Text]
}

type CollectionPage {
  cursor: String
  edges: [Collection]!
}

type ColourSpace {
  sourceValue: String!
}

"A content contains the raw data of a domain object from a source system."
type Content {
  "In the context of the PDP, this field is used to indicate whether the data may be published publicly."
  accessConditions: [AccessCondition]!
  "In the context of the PDP, this field is used to indicate whether the data may be published publicly."
  confidentialityLevel: ConfidentialityLevel!
  "The domain type of the content."
  domainType: DomainType!
  "The PDP id of the content."
  id: String!
  "The source system publishing the metadata."
  provenance: Provenance!
  "The business unit or external organisation publishing the metadata."
  publisher: Publisher!
  "The data of the content in source schema."
  sourceData: SourceData!
  "The id of the content in the source system. It is unique in the source system, but not globally."
  sourceId: String!
}

"A page containing contents matching the query filters."
type ContentPage {
  cursor: String
  edges: [Content]!
}

"A department describes an organizational unit in the form of a department that is responsible for the editorial creation process of an audiovisual object. An example of an organizational unit is \"Culture\" or \"Sports\"."
type Department implements Agent {
  "The name of the department."
  name: String!
}

"A publication in the form of a document used by an editorial object, e.g. a PDF attached to an article."
type Document implements Resource {
  description: [Text]
  identifiers: [Identifier]
  "ISO-8601"
  modificationDate: DateTime
  name: [Text]
  "ISO-8601"
  productionDate: DateTime
  url: URI
}

type EditorialSegment {
  contentDescription: [Text]!
  coversLocations: [Location]!
  identifiers: [Identifier]!
  segmentNumber: Int!
}

type Essence {
  aspectRatio: AspectRatio
  audioTracks: [AudioTrack]
  colourSpace: ColourSpace
  comment: [Text]
  identifiers: [Identifier]!
  locator: String
  mediumType: MediumType
}

"""
The genre is used to classify audiovisual objects depending on their
content into subject areas such as "Culture", "Sports", "News" or "Economy".
"""
type Genre {
  "A general description of the genre."
  description: Text
  "The preferred lexical label for a genre, in a given language."
  name: Text!
  "The source identifier of the genre."
  sourceId: String
}

type GeoBlockingLocation {
  "The location to which the content is restricted (e.g. 'Switzerland')"
  sourceValue: String!
}

type Identifier {
  type: IdentifierType!
  value: String!
}

"An Agent's participation in the creation of publication of a MediaResource (e.g. Article)"
type Involvement {
  "The Person, Department, or Team involved."
  agent: Agent!
  "The description of the involvement (e.g. author)."
  name: String!
}

type Item {
  abstract: [Text]
  accessConditions: [AccessCondition]!
  "ISO-8601"
  broadcastDate: DateTime
  contributors: [Involvement]
  coveredBy: [Rights]
  coversLocations: [Location]
  description: [Text]
  durationMs: BigInteger
  endMs: BigInteger
  existsAs: [Item]!
  "The PDP id of the item."
  id: String!
  identifiers: [Identifier]!
  instantiatedBy: [Essence]
  keywords: [String]
  mediaType: ProgrammeMediaType
  "ISO-8601"
  modificationDate: DateTime
  parts: [EditorialSegment]
  position: Int
  producers: [Producer]
  "ISO-8601"
  productionDate: DateTime
  productionTypes: [ProductionType]
  resources: [Resource]
  startMs: BigInteger
  title: [Text]
}

"A link used by an editorial object, e.g. a link to a related article."
type Link implements Resource {
  description: [Text]
  name: [Text]
  url: URI
}

type Location {
  country: [Text]
  identifiers: [Identifier]!
  name: [Text]!
}

type MediumType {
  sourceValue: String!
}

type Occupation {
  name: [Text]!
}

"A person is a clearly identifiable human actor who is involved in the creation of an editorial object."
type Person implements Agent {
  "The alias of the person."
  alias: [String]
  "Identifiers for this person."
  identifiers: [Identifier]!
  "The full name of the person."
  name: String!
  "The role(s) the person takes in relation to the asset."
  occupations: [Occupation]
}

"A picture used by an editorial object, e.g. a channel's logo or a photo embedded into an article."
type Picture implements Resource {
  altText: [Text]
  copyright: String
  description: [Text]
  height: Int
  name: [Text]
  url: URI
  width: Int
}

type Producer {
  sourceValue: String!
}

type ProductionType {
  sourceValue: String!
}

type Programme {
  abstract: [Text]
  "Indicates whether the data may be published publicly."
  accessConditions: [AccessCondition]!
  associatedCampaigns: [Campaign]
  "ISO-8601"
  broadcastDate: DateTime
  contributors: [Involvement]
  coveredBy: [Rights]
  coversLocations: [Location]
  description: [Text]
  durationMs: BigInteger
  episodeNumber: Int
  existsAs: [Programme]!
  genres: [Genre]
  "The PDP id of the programme."
  id: String!
  identifiers: [Identifier]!
  instantiatedBy: [Essence]
  items: [Item]
  keywords: [String]
  lead: [Text]
  mediaType: ProgrammeMediaType
  memberOf: [Collection]
  "ISO-8601"
  modificationDate: DateTime
  producers: [Producer]
  "ISO-8601"
  productionDate: DateTime
  productionTypes: [ProductionType]
  "The source system publishing the metadata."
  provenance: Provenance!
  "The business unit or external organisation publishing the metadata."
  publisher: Publisher!
  resources: [Resource]
  scheduledOn: [PublicationEvent]
  seasonNumber: Int
  "The id of the programme in the source system. It is unique in the source system, but not globally."
  sourceId: String!
  "Unmapped values directly from the source system. These might change or vanish without notice."
  sourceValues(
    "The key(s) of the source values you want to load. All source values are returned when the value is null or an empty list."
    key: [String]
  ): [SourceValue]!
  title: [Text]
}

type ProgrammePage {
  cursor: String
  edges: [Programme]!
}

type PublicationEvent {
  identifiers: [Identifier]!
  "ISO-8601"
  scheduleDate: DateTime
}

"A service by which a publishing organisation or person publishes its content and offers access to consumers, e.g. \"SRF Info\" or \"RSI Rete Uno\"."
type PublicationService {
  "The conditions under which content can be accessed."
  accessConditions: [AccessCondition]!
  "Specifies the distribution vector of a publication service."
  distributionVector: DistributionVector
  "The PDP id of the publication service."
  id: String!
  "The name of the publication service."
  name: String
  "The source system publishing the metadata."
  provenance: Provenance!
  "The business unit or external organisation publishing the metadata."
  publisher: Publisher!
  "Resources such as pictures (e.g. a logo) to this publication service."
  resources: [Resource]
  "The id of the publication service in the source system. It is unique in the source system, but not globally."
  sourceId: String!
}

"A page containing publication services matching the query filters."
type PublicationServicePage {
  cursor: String
  edges: [PublicationService]!
}

"Query root"
type Query {
  "Returns the article with the provided PDP id or null if it does not exist."
  article(
    "A PDP id of an article."
    id: String!
  ): Article @rolesAllowed(value : "Resource.ReadInternal")
  """
  **Experimental, do not use in production!**
  This query might be changed or removed at any time without notice.
  
  Lists the available article genres.
  """
  articleGenres(
    """
    The returned list will contain only genres that match all filters. Only
    filters with values affect the result. If you don't want to filter at all, then
    you can set this field to null.
    """
    filter: ArticleGenreFilterInput
  ): [Genre]! @experimental
  "Returns articles matching the filter criteria."
  articles(
    "The cursor of the previous page. Set to null to get the first page."
    after: String,
    """
    The returned page will contain only articles that match all filters. Only
    filters with values affect the result. If you don't want to filter at all, then
    you can set this field to null.
    """
    filter: ArticleFilterInput,
    "The number of articles per page."
    first: Int! @constraint(max : 500) @constraint(min : 1),
    "Specifies the order in which the query returns matching articles."
    sort: [ArticleSortInput] = []
  ): ArticlePage! @rolesAllowed(value : "Resource.ReadInternal")
  "Returns the campaign with the provided PDP id or null if it does not exist."
  campaign_experimental(
    "A PDP id of a campaign."
    id: String!
  ): Campaign @rolesAllowed(value : "Resource.ReadInternal")
  "Returns campaigns matching the filter criteria"
  campaigns_experimental(
    "The cursor of the previous page. Set to null to get the first page."
    after: String,
    "The returned page will contain only campaigns that match all filters. Only filters with values affect the result. If you don't want to filter at all, then you can set this field to null."
    filter: CampaignFilterInput,
    "The number of campaigns per page."
    first: Int! @constraint(max : 500) @constraint(min : 1),
    "Specifies the order in which the query returns matching campaigns."
    sort: [CampaignSortInput] = []
  ): CampaignPage! @rolesAllowed(value : "Resource.ReadInternal")
  "Returns the collection with the provided PDP id or null if it does not exist."
  collection_experimental(
    "A PDP id of a collection."
    id: String!
  ): Collection @experimental @rolesAllowed(value : "Resource.ReadInternal")
  "Returns collections matching the filter criteria."
  collections_experimental(
    "The cursor of the previous page. Set to null to get the first page."
    after: String,
    "The returned page will contain only collections that match all filters. Only filters with values affect the result. If you don't want to filter at all, then you can set this field to null."
    filter: CollectionFilterInput,
    "The number of collections per page."
    first: Int! @constraint(max : 500) @constraint(min : 1),
    "Specifies the order in which the query returns matching collections."
    sort: [CollectionSortInput] = []
  ): CollectionPage! @experimental @rolesAllowed(value : "Resource.ReadInternal")
  "Returns the content with the provided PDP id or null if it does not exist."
  content(
    "A PDP id of a content."
    id: String!
  ): Content @rolesAllowed(value : "Resource.ReadInternal")
  "Returns contents matching the filter criteria."
  contents(
    "The cursor of the previous page. Set to null to get the first page."
    after: String,
    """
    The returned page will contain only contents that match all filters. Only
    filters with values affect the result. If you don't want to filter at all, then
    you can set this field to null.
    """
    filter: ContentFilterInput,
    "The number of contents per page."
    first: Int! @constraint(max : 500) @constraint(min : 1),
    "Specifies the order in which the query returns matching contents."
    sort: [ContentSortInput] = []
  ): ContentPage! @rolesAllowed(value : "Resource.ReadInternal")
  "Returns the programme with the provided PDP id or null if it does not exist."
  programme_experimental(
    "A PDP id of a programme."
    id: String!
  ): Programme @experimental @rolesAllowed(value : "Resource.ReadInternal")
  "Returns programmes matching the filter criteria."
  programmes_experimental(
    "The cursor of the previous page. Set to null to get the first page."
    after: String,
    "The returned page will contain only programmes that match all filters. Only filters with values affect the result. If you don't want to filter at all, then you can set this field to null."
    filter: ProgrammeFilterInput,
    "The number of programmes per page."
    first: Int! @constraint(max : 500) @constraint(min : 1),
    "Specifies the order in which the query returns matching programmes."
    sort: [ProgrammeSortInput] = []
  ): ProgrammePage! @experimental @rolesAllowed(value : "Resource.ReadInternal")
  "Returns the publication service with the provided PDP id or null if it does not exist."
  publicationService(
    "A PDP id of a publication service."
    id: String!
  ): PublicationService @rolesAllowed(value : "Resource.ReadInternal")
  "Returns publication services matching the filter criteria."
  publicationServices(
    "The cursor of the previous page. Set to null to get the first page."
    after: String,
    "The returned page will contain only publication services that match all filters. Only filters with values affect the result. If you don't want to filter at all, then you can set this field to null."
    filter: PublicationServiceFilterInput,
    "The number of publication services per page."
    first: Int! @constraint(max : 500) @constraint(min : 1),
    "Specifies the order in which the query returns matching publication services."
    sort: [PublicationServiceSortInput] = []
  ): PublicationServicePage! @rolesAllowed(value : "Resource.ReadInternal")
  """
  **Experimental, do not use in production!**
  This query might be changed or removed at any time without notice.
  
  Full text search for articles.
  """
  searchArticles(
    "The number of articles."
    first: Int = 10 @constraint(max : 500) @constraint(min : 1),
    "The language of the words used in the search query."
    language: TextSearchLanguage = none,
    "The search query."
    query: String!
  ): [Article]! @experimental @rolesAllowed(value : "Resource.ReadInternal")
}

"A person or entity holding the right"
type RightsHolder {
  "Name of the rights holder as provided by the source system."
  sourceValue: String!
}

type SourceData {
  "Serialized source data (e.g. a JSON object as string)."
  data: String!
  "Mime type of the data (e.g. 'application/json')."
  mimeType: String!
  "Source schema information."
  schema: SourceSchema
}

type SourceSchema {
  "Schema version of the data. Should be changed in case of major schema changes."
  version: String!
}

"An unmapped value directly from the source system."
type SourceValue {
  key: String!
  value: String!
}

"A team is a group of clearly identifiable and organizationally related actors who are jointly involved in the creation process of an editorial object. An example of a team is the editorial team of \"Regionaljournal Ostschweiz\"."
type Team implements Agent {
  "The name of the team."
  name: String!
}

"Represents a human readable text for a corresponding asset."
type Text {
  "The content of the text."
  content: String!
  "The language of the text."
  language: Language
}

"A Uniform Resource Locator referencing a resource."
type URI {
  "The URL."
  url: String
  "The URN."
  urn: String
}

"A usage right given to the rights holder"
type UsageRights implements Rights {
  rightsHolder: RightsHolder
  "Name or description of the usage rights as provided by the source system"
  sourceValue: String!
}

"Specifies the fields that can be used to sort articles."
enum ArticleSortField {
  modifiedAt
  releasedAt
  updatedAt
}

"Specifies the fields that can be used to sort contents."
enum CampaignSortField {
  updatedAt
}

"Specifies the fields that can be used to sort collections."
enum CollectionSortField {
  updatedAt
}

enum CollectionType {
  """
  The collection represents a grouping of some kind, e.g. a topic
  or category. A grouping can have other groupings as its members when
  representing a hirarchical structure.
  """
  Grouping
  """
  A series is a special type of content collection that consists of several episodes.
  It is grouped according to characters, themes or a publication scheme and can contain
  both continuous stories and stand-alone episodes. Series differ from shows in their specific
  structure and thematic or narrative continuity.
  """
  Series
  """
  A show is a format that serves as a framework for a series of programmes or episodes produced in a
  particular style or on a particular theme. Each show may have regularly recurring segments,
  a fixed time slot and a specific target audience. An example of this is the main news programme
  on Swiss Radio and Television (SRF), the "Tagesschau".
  """
  Show
}

"""
Assets intended to be made widely available outside of the SRG-SSR must be classified as "C1_Public".
Assets not (anymore) openly published by the SRG-SSR to the public may be classified as "C2_Internal".
In the context of the PDP "C2_Internal" applies e.g. for assets with data protection or copyright issues.
If you are unsure set the confidentiality level to "C2_Internal" and/or check our Dev-Hub for more information on this topic.
"""
enum ConfidentialityLevel {
  C1_Public
  C2_Internal
}

"Specifies the fields that can be used to sort contents."
enum ContentSortField {
  updatedAt
}

enum DistributionVector {
  Online
  Radio
  TV
  Unknown
}

"The type of the content."
enum DomainType {
  "An editorial work consisting of text, graphic, sometimes video or audio, created for publication on web-sites, blogs and other channels similar to the more traditional paper-based publications."
  Article
  "A Campaign defines a strategy for publishing content to a targeted Audience according to a PublicationPlan. Campaign strategies can be refined taking into account the analysis of the Resonance of related ConsumptionEvents (e.g. likes, downloads, etc). Campaigns can apply to a variety of broadcasting strategies e.g. advertising campaigns, promotional campaigns or else."
  Campaign
  "A collection aggregates related editorial objects into a common, higher-level container, thereby enhancing their organization and accessibility."
  Collection
  "An editorial work as a stand-alone piece or an episode of a series, intended to be consumed as a whole."
  Programme
  "Specific conduits or pathways through which content is delivered from publication services. Operated on a publication platform, e.g. \"Radio SRF 1 on Radio\" or \"Radio SRF 1 on srf.ch\"."
  PublicationChannel
  "A service by which a publishing organisation or person publishes its content and offers access to consumers, e.g. \"SRF Info\" or \"RSI Rete Uno\"."
  PublicationService
  "An AI-powered data enrichment that provides essential information about the speaking-times of different individuals, primarily public figures, within audiovisual assets. This AI-generated data enables in-depth analysis and better understanding of the speaker's contribution, aiding journalistic research, content discovery, and fact-checking."
  Speaker
  "Subtitling are text representing the contents of the audio in a film, television show or other audiovisual media. Subtitling might provide a transcription or translation of spoken dialogue."
  Subtitling
}

enum IdentifierType {
  "Identifies an object in the archive context (e.g. '2308936')"
  ANR
  "Identifies an episode in the AIS"
  AisEpisodeId
  "Identifies a campaign in the OfferPortfolio (e.g. 'A00104')"
  ConceptId
  "The Unique ISO Identifier for Audiovisual Content (see: https://www.isan.org)"
  ISAN
  "Identifies an object in the PDP (e.g. 'urn:pdp:faro_srf:programme:85bef433-ef9a-4183-8d86-78e4e0f40781')"
  PdpId
  "Identifies a product element (e.g. 'NEWS20201116_TM_0100_0001')"
  ProductElementId
  "Identifies a product (e.g. 'NEWS20201116_TM_0100')"
  ProductId
  "Identifies an object in the source system (see provenance)"
  SourceId
  "Identifies a product variant (e.g. 'AUDI20230623_RS_0015_APP_02')"
  VariantId
}

enum Language {
  Unknown
  aa
  ab
  ae
  af
  ak
  am
  an
  ar
  as
  av
  ay
  az
  ba
  be
  bg
  bi
  bm
  bn
  bo
  br
  bs
  ca
  ce
  ch
  co
  cr
  cs
  cu
  cv
  cy
  da
  de
  dv
  dz
  ee
  el
  en
  eo
  es
  et
  eu
  fa
  ff
  fi
  fj
  fo
  fr
  fy
  ga
  gd
  gl
  gn
  gu
  gv
  ha
  he
  hi
  ho
  hr
  ht
  hu
  hy
  hz
  ia
  id
  ie
  ig
  ii
  ik
  io
  is
  it
  iu
  ja
  jv
  ka
  kg
  ki
  kj
  kk
  kl
  km
  kn
  ko
  kr
  ks
  ku
  kv
  kw
  ky
  la
  lb
  lg
  li
  ln
  lo
  lt
  lu
  lv
  mg
  mh
  mi
  mk
  ml
  mn
  mr
  ms
  mt
  my
  na
  nb
  nd
  ne
  ng
  nl
  nn
  no
  nr
  nv
  ny
  oc
  oj
  om
  or
  os
  pa
  pi
  pl
  ps
  pt
  qu
  rm
  rn
  ro
  ru
  rw
  sa
  sc
  sd
  se
  sg
  si
  sk
  sl
  sm
  sn
  so
  sq
  sr
  ss
  st
  su
  sv
  sw
  ta
  te
  tg
  th
  ti
  tk
  tl
  tn
  to
  tr
  ts
  tt
  tw
  ty
  ug
  uk
  ur
  uz
  ve
  vi
  vo
  wa
  wo
  xh
  yi
  yo
  za
  zh
  zu
}

enum ProgrammeMediaType {
  Audio
  Video
}

"Specifies the fields that can be used to sort contents."
enum ProgrammeSortField {
  updatedAt
}

"The source system publishing the metadata."
enum Provenance {
  AIBOX_SRGSSR
  AIS_SRF
  Angebotsportfolio_SRF
  CMS_SRF
  CMS_SWI
  CUE_RSI
  CUE_RTS
  DigAS_RTR
  DigAS_SRF
  Escenic_RSI
  Escenic_RTS
  Faro_SRF
  Gico_RTS
  OpenMedia_RTR
  OpenMedia_SRF
  PlaySuisse_SRGSSR
  Play_SRF
  Siranau_RTS
  WhatsOn_SRF
}

"Specifies the fields that can be used to sort contents."
enum PublicationServiceSortField {
  updatedAt
}

"The publication state of an article."
enum PublicationStatus {
  Published
  Unknown
  Unpublished
}

"""
The business unit or external organisation publishing the metadata.
Please contact the PDP team if a publisher is missing.
"""
enum Publisher {
  AP
  ARD
  ARTE
  FranceTV
  NZZ
  PZBundeshaus
  RSI
  RTR
  RTS
  SRF
  SRGSSR
  SWI
  SwissTXT
  ZDF
}

"Values for sorting."
enum SortOrder {
  "Sort ascending, nulls first."
  ASC
  "Sort descending, nulls last."
  DESC
}

"The supported languages for a full text search."
enum TextSearchLanguage {
  da
  de
  en
  es
  fi
  fr
  hu
  it
  nb
  nl
  none
  pt
  ro
  ru
  sv
  tr
}

"Scalar for BigDecimal"
scalar BigDecimal

"Scalar for BigInteger"
scalar BigInteger

"Scalar for DateTime"
scalar DateTime

"The returned page will contain only articles that match all filters. Only filters with values affect the result."
input ArticleFilterInput {
  "Filters articles by genre."
  genres: [GenreFilterInput]
  "Filters articles with an id or alternative identifier matching any of the provided identifiers."
  identifiers: [String]
  "Filters articles depending on the value of the field `isLongForm`."
  isLongForm: Boolean
  """
  Filters articles depending on the value of the field `modifiedAt`. If
  the source system did not set a timestamp, then the article will not be included
  if this filter is set.
  """
  modified: TemporalFilterInput
  "Filters articles depending on their provenance."
  provenance: Provenance
  "Filters articles depending on their publisher."
  publisher: Publisher
  """
  Filters articles depending on the value of the field `releasedAt`. If
  the source system did not set a timestamp, then the article will not be included
  if this filter is set.
  """
  released: TemporalFilterInput
  """
  Filters articles depending on when they were updated. An article counts as
  updated when either the source system changes its data or a relation to another
  asset is updated. Updates to related assets like episodes or clips are not taken
  into account.
  """
  updated: TemporalFilterInput
}

"""
The returned list will contain only article genres matching all filters.
Only filters with values affect the result.
"""
input ArticleGenreFilterInput {
  "Filters article genres depending on their provenance."
  provenance: Provenance
  "Filters article genres depending on their publisher."
  publisher: Publisher
}

"Defines a field and order to be used for sorting the articles."
input ArticleSortInput {
  "The field of the article you want to sort by."
  field: ArticleSortField!
  "The order in which want the articles sorted."
  order: SortOrder!
}

"The returned page will contain only campaigns that match all filters. Only filters with values affect the result."
input CampaignFilterInput {
  "Filters campaigns matching any of the provided identifiers."
  identifiers: [String]
  "Filters campaigns depending on their provenance."
  provenance: Provenance
  "Filters campaigns depending on their publisher."
  publisher: Publisher
  "Filters campaigns depending on when they were updated. A channel counts as updated when either the source systemchanges its data or a relation to another asset is updated."
  updated: TemporalFilterInput
}

"Defines a field and order to be used for sorting the contents."
input CampaignSortInput {
  "The field of the campaign you want to sort by."
  field: CampaignSortField!
  "The order in which want the campaigns sorted."
  order: SortOrder!
}

"The returned page will contain only collections that match all filters. Only filters with values affect the result."
input CollectionFilterInput {
  "Filters collections matching any of the provided identifiers."
  identifiers: [String]
  "Filters collections depending on their provenance."
  provenance: Provenance
  "Filters collections depending on their publisher."
  publisher: Publisher
  "Filters collections depending on when they were updated. A channel counts as updated when either the source systemchanges its data or a relation to another asset is updated."
  updated: TemporalFilterInput
}

"Defines a field and order to be used for sorting the collections."
input CollectionSortInput {
  "The field of the collection you want to sort by."
  field: CollectionSortField!
  "The order in which want the collections sorted."
  order: SortOrder!
}

"The returned page will contain only contents that match all filters. Only filters with values affect the result."
input ContentFilterInput {
  "Filters contents depending on their domain type."
  domainType: DomainType
  "Filters contents with an id or alternative identifier matching any of the provided identifiers."
  identifiers: [String]
  "Filters contents depending on their provenance."
  provenance: Provenance
  "Filters contents depending on their publisher."
  publisher: Publisher
  """
  Filters contents depending on when they were updated. An content counts as
  updated when either the source system changes its data or a relation to another
  asset is updated. Updates to related assets like episodes or clips are not taken
  into account.
  """
  updated: TemporalFilterInput
}

"Defines a field and order to be used for sorting the contents."
input ContentSortInput {
  "The field of the content you want to sort by."
  field: ContentSortField!
  "The order in which want the contents sorted."
  order: SortOrder!
}

"""
A filter for genres. If you provide a value for this filter, then the
result will contain any items that contains at least one matching genre.
"""
input GenreFilterInput {
  "Filters items by genre name."
  name: TextFilterInput
}

"The returned page will contain only programmes that match all filters. Only filters with values affect the result."
input ProgrammeFilterInput {
  broadcastDate: TemporalFilterInput
  "Filters programmes matching any of the provided identifiers."
  identifiers: [String]
  keywords: [String]
  "Filters programmes by MediaType."
  mediaType: ProgrammeMediaType
  "Filters programmes depending on the collection they are a member of. Use the PDP ID of the collection."
  memberOf: String
  "Filters programmes depending on their provenance."
  provenance: Provenance
  "Filters programmes depending on their publisher."
  publisher: Publisher
  "Filters programmes depending on when they were updated. A channel counts as updated when either the source system changes its data or a relation to another asset is updated."
  updated: TemporalFilterInput
}

"Defines a field and order to be used for sorting the contents."
input ProgrammeSortInput {
  "The field of the programme you want to sort by."
  field: ProgrammeSortField!
  "The order in which want the programmes sorted."
  order: SortOrder!
}

"The returned page will contain only publication services that match all filters. Only filters with values affect the result."
input PublicationServiceFilterInput {
  "Filters publication services matching any of the provided identifiers."
  identifiers: [String]
  "Filters publication services depending on their provenance."
  provenance: Provenance
  "Filters publication services depending on their publisher."
  publisher: Publisher
  "Filters publication services depending on when they were updated. A channel counts as updated when either the source systemchanges its data or a relation to another asset is updated."
  updated: TemporalFilterInput
}

"Defines a field and order to be used for sorting the contents."
input PublicationServiceSortInput {
  "The field of the publication service you want to sort by."
  field: PublicationServiceSortField!
  "The order in which want the publication services sorted."
  order: SortOrder!
}

"""
A filter for a temporal field. If you provide a date-time for both the from and
to fields, the result will only contain items between those two date-times.
If you only provide one of the date-times, then the result  will contain all
items starting from or until the respective date-time. Both the from and the to
date-time are exclusive, i.e. the result will not contain items with the exact
same date-time.
"""
input TemporalFilterInput {
  "Deprecated. Please use 'from'. (ISO-8601)"
  after: DateTime
  "Deprecated. Please use 'to'. (ISO-8601)"
  before: DateTime
  """
  Provide an ISO-8601 date-time with an offset from UTC/Greenwich, such as
  2022-07-18T10:15:30+02:00 to filter for items strictly after that date-time. (ISO-8601)
  """
  from: DateTime
  """
  Provide an ISO-8601 date-time with an offset from UTC/Greenwich, such as
  2022-07-18T10:15:30+02:00 to filter for items strictly before that date-time. (ISO-8601)
  """
  to: DateTime
}

"A filter for a text field."
input TextFilterInput {
  "Filters texts by content. The result will only contain texts matching the entire content exactly."
  content: String
}

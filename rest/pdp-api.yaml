openapi: 3.0.3
info:
  title: PDP REST API
  description: REST API for SRG SSR's Publication Data Platform.
  version: v1
servers:
  - url: https://api.pdp.{environment}.srgssr.ch/api
    variables:
      environment:
        default: production
        enum:
          - dev
          - int
          - production
externalDocs:
  description: PDP Schema Documentation
  url: 'https://api.pdp.production.srgssr.ch/docs-page.html#section-2'
paths:
  /contents:
    post:
      tags:
        - content
      summary: 'Upsert content'
      operationId: postContent
      responses:
        '200':
          description: 'Success Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: 'Invalid input'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: 'Server has a problem'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - azure_auth:
            - 'write:all'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Content'
        description: Article payload
        required: true
    delete:
      tags:
        - content
      summary: |
        Delete content by provenance, domain type and sourceId. If no source Id is provided, all content of the given type and provenance will be deleted.
      operationId: deleteContent
      parameters:
        - name: provenance
          in: query
          description: 'The source system publishing the metadata.'
          required: true
          schema:
            $ref: '#/components/schemas/Provenance'
        - name: type
          in: query
          description: 'The source system type.'
          required: true
          schema:
            $ref: '#/components/schemas/DomainType'
        - name: sourceId
          in: query
          description: 'The id in the source system. It has to be unique in the source system, but not globally.'
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Content deleted
        '400':
          description: 'Bad request, e.g. invalid parameter values.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - azure_auth:
            - 'write:all'
  /contents/{pdpId}:
    delete:
      tags:
        - content
      summary: 'Delete content by PDP Id'
      operationId: deleteContent
      parameters:
        - name: pdpId
          in: path
          description: 'PDP Id of the channel that needs deleting'
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'Content deleted'
        '400':
          description: 'Not found'
      security:
        - azure_auth:
            - 'write:all'
  /articles:
    post:
      tags:
        - article
      summary: Upsert article
      operationId: postArticle
      responses:
        '202':
          description: Accepted request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
        '400':
          description: Invalid input
      security:
        - azure_auth:
            - 'write:all'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
        description: Article payload
        required: true
  /channels:
    post:
      tags:
        - channel
      summary: Upsert channel (contract only - not yet implemented)
      operationId: postChannel
      responses:
        '201':
          description: Channel created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedResponse'
        '400':
          description: Invalid input
      security:
        - azure_auth:
            - 'write:all'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Channel'
        description: Channel payload
        required: true
  /channels/{pdpId}:
    delete:
      tags:
        - channel
      summary: Delete channel by PDP Id (contract only - not yet implemented)
      operationId: deleteChannel
      parameters:
        - name: pdpId
          in: path
          description: PDP Id of the channel that needs deleting
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Channel deleted
        '404':
          description: Not found
      security:
        - azure_auth:
            - 'write:all'

  /shows:
    post:
      tags:
        - show
      summary: Upsert show (contract only - not yet implemented)
      operationId: postShow
      responses:
        '201':
          description: Show created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedResponse'
        '400':
          description: Invalid input
      security:
        - azure_auth:
            - 'write:all'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Show'
        description: Show payload
        required: true

  /episodes:
    post:
      tags:
        - episode (alpha)
      summary: Upsert episode
      operationId: postEpisode
      responses:
        '202':
          description: Accepted request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
        '422':
          description: Invalid input
      security:
        - azure_auth:
            - 'write:all'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Episode'
        description: Episode payload
        required: true
  /correlations:
    post:
      tags:
        - correlations
      summary: Upsert Correlation
      operationId: postCorrelation
      responses:
        '201':
          description: Accepted request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedResponse'
        '400':
          description: Invalid input
      security:
        - azure_auth:
            - 'write:all'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Correlation'
        description: Correlation payload
        required: true
components:
  securitySchemes:
    azureAuthDev:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: 'https://login.microsoftonline.com/2598639a-d083-492d-bdbe-f1dd8066b03a/oauth2/v2.0/token'
          authorizationUrl: 'https://login.microsoftonline.com/2598639a-d083-492d-bdbe-f1dd8066b03a/oauth2/v2.0/authorize'
          scopes:
            'write:all': 'https://graphql-api.pdp.dev.srgssr.ch/api/.default'
    azureAuthInt:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: 'https://login.microsoftonline.com/2598639a-d083-492d-bdbe-f1dd8066b03a/oauth2/v2.0/token'
          authorizationUrl: 'https://login.microsoftonline.com/2598639a-d083-492d-bdbe-f1dd8066b03a/oauth2/v2.0/authorize'
          scopes:
            'write:all': 'https://graphql-api.pdp.int.srgssr.ch/api/.default'
    azureAuthProduction:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: 'https://login.microsoftonline.com/2598639a-d083-492d-bdbe-f1dd8066b03a/oauth2/v2.0/token'
          authorizationUrl: 'https://login.microsoftonline.com/2598639a-d083-492d-bdbe-f1dd8066b03a/oauth2/v2.0/authorize'
          scopes:
            'write:all': 'https://graphql-api.pdp.production.srgssr.ch/api/.default'
  schemas:

    ApiError:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: integer
        message:
          type: string

    DomainType:
      description: |
        The type of the content. Contact the PDP team if you have data that does
        not fit any of these types.
      type: string
      enum:
        - Article
        - Channel
        - Show
        - Episode

    Content:
      description: >
        Content is an envelope around the input
      type: object
      required:
        - domainType
        - sourceId
        - publisher
        - provenance
        - confidentialityLevel
        - sourceData
      properties:
        domainType:
          $ref: '#/components/schemas/DomainType'
        publisher:
          $ref: '#/components/schemas/Publisher'
        provenance:
          $ref: '#/components/schemas/Provenance'
        sourceId:
          description: 'The id of the show in the source system. It has to be unique in the source system, but not globally.'
          type: string
        confidentialityLevel:
          $ref: '#/components/schemas/ConfidentialityLevel'
        sourceData:
          $ref: '#/components/schemas/SourceData'

    SourceData:
      description:
        Upstream data source model
      type: object
      required:
        - data
        - schema
      properties:
        data:
          description: String of source data
          type: string
        schema:
          $ref: '#/components/schemas/SourceSchema'
        mimeType:
          description: "Source data mimetype"
          type: string
          default: "application/json"

    SourceSchema:
      description: "Source data version"
      type: object
      required:
        - version
      properties:
        version:
          type: string

    Channel:
      description: 'A channel is a linear and non-linear broadcast vector, such as SRF1, RTSUn, RSI LA1.'
      type: object
      required:
        - sourceId
        - publisher
        - provenance
        - confidentialityLevel
      properties:
        publisher:
          description: 'The business unit or external organisation publishing the metadata.'
          $ref: '#/components/schemas/Publisher'
        provenance:
          description: 'The source system publishing the metadata.'
          $ref: '#/components/schemas/Provenance'
        sourceId:
          description: 'The id of the channel in the source system. It has to be unique in the source system, but not globally.'
          type: string
        confidentialityLevel:
          description: 'In the context of the PDP, this field is used to indicate whether the data may be published publicly.'
          $ref: '#/components/schemas/ConfidentialityLevel'
        name:
          description: 'The name of the channel.'
          type: string
        distributionVector:
          description: 'Specifies the distribution vector of a channel.'
          $ref: '#/components/schemas/DistributionVector'
        relatedImages:
          description: 'Images associated with the channel.'
          type: array
          items:
            $ref: '#/components/schemas/Image'

    DistributionVector:
      description: 'A method or platform used to distribute content to its intended audience.'
      type: string
      enum:
        - TV
        - Radio
        - Online

    Show:
      description: >
        A show is a broadcasting container to which a specific episode belongs
        and which is used to group individual broadcasts. An example of a show
        is "10 vor 10" or "Echo der Zeit".
      type: object
      required:
        - sourceId
        - publisher
        - provenance
        - confidentialityLevel
      properties:
        publisher:
          $ref: '#/components/schemas/Publisher'
        provenance:
          $ref: '#/components/schemas/Provenance'
        sourceId:
          description: 'The id of the show in the source system. It has to be unique in the source system, but not globally.'
          type: string
        confidentialityLevel:
          $ref: '#/components/schemas/ConfidentialityLevel'
        title:
          description: 'The titles for the show in potentially different languages.'
          type: array
          items:
            $ref: '#/components/schemas/Text'
        lead:
          description: 'The brief descriptions of the show in potentially different languages.'
          type: array
          items:
            $ref: '#/components/schemas/Text'
        description:
          description: 'The detailed descriptions of the show in potentially different languages.'
          type: array
          items:
            $ref: '#/components/schemas/Text'
        websiteUrl:
          description: 'The URL of the show''s website.'
          $ref: '#/components/schemas/URL'
        publications:
          description: 'Defines the schedules describing the regularly occurring planned publications.'
          type: array
          items:
            $ref: '#/components/schemas/Publication'

    Publication:
      description: 'Describes how a show is planned to be published on a specific channel.'
      type: object
      properties:
        channel:
          description: 'The channel on which this show will be published.'
          $ref: '#/components/schemas/ChannelReference'
        schedules:
          description: >
            A schedule defines a repeating time period used to describe the
            regularly occurring publications of a show's episodes.
          type: array
          items:
            $ref: '#/components/schemas/Schedule'
        exclusions:
          description: >
            Defines timestamps during which a scheduled episode will not take
            place. The property allows to declare exceptions to the schedules.
            The event that would have started at that specific date and time
            should be excluded from the schedule. The timestamps have to be in
            ISO 8601 format `YYYY-MM-DDThh:mm:ss.sss[Z|±hh:mm]`.
          type: array
          items:
            type: string
            format: date-time

    Schedule:
      description: 'A schedule defines a repeating time period used to describe a regularly occurring episode. With the provided metadata fields, you are able to define the schedule. The section "Schema Concepts: Show Schedules" in the PDP API documentation goes into more details and provides a few example schedules.'
      type: object
      properties:
        byDay:
          description: 'Defines the day(s) of the week on which episodes of the show are scheduled.'
          type: array
          items:
            $ref: '#/components/schemas/DayOfWeek'
        byMonth:
          description: 'Defines the month(s) of the year on which episodes of the show are scheduled.'
          type: array
          items:
            $ref: '#/components/schemas/Month'
        byMonthDay:
          description: 'Defines the day(s) of the month on which episodes of the show are scheduled. Specified as an integer between 1-31.'
          type: array
          items:
            type: integer
            format: int32
            minimum: 1
            maximum: 31
        byMonthWeek:
          description: 'Defines the week(s) of the month on which episodes of the show are scheduled. Specified as an integer between 1-5. For clarity, byMonthWeek is best used in conjunction with byDay to indicate concepts like the first and third Mondays of a month.'
          type: array
          items:
            type: integer
            format: int32
            minimum: 1
            maximum: 5
        duration:
          description: 'The duration of a single episode in the show in milliseconds.'
          type: integer
          format: int64
          minimum: 0
        startDate:
          description: 'The start date of an episode of the show in ISO 8601 calendar date format `YYYY-MM-DD`.'
          type: string
          format: date
        startTime:
          description: 'The start time of an episode of the show in ISO 8601 time format `hh:mm:ss.sss[Z|±hh:mm]`.'
          type: string
          pattern: '^\d{2}:\d{2}:\d{2}(\.\d{1,3})?(?:Z|[+-]\d{2}:\d{2})$'
        end:
          description: 'The start date and time of the last episode of the show in ISO 8601 format `YYYY-MM-DDThh:mm:ss.sss[Z|±hh:mm]`.'
          type: string
          format: date-time
        repeatFrequency:
          description: 'Defines the frequency at which episodes will occur according to a schedule. The intervals between episodes should be defined as a duration of time.'
          type: object
          properties:
            months:
              description: 'Repeat frequency in months. E.g. 1: every month, 2: every two months, etc.'
              type: integer
              format: int32
              minimum: 1
            weeks:
              description: 'Repeat frequency in weeks. E.g. 1: every week, 2: every two weeks, etc.'
              type: integer
              format: int32
              minimum: 1
            days:
              description: 'Repeat frequency in days. E.g. 1: every day, 2: every two days, etc.'
              type: integer
              format: int32
              minimum: 1
            minutes:
              description: 'Repeat frequency in minutes. E.g. 30: every half hour, 60: every hour, 120: every two hours, etc.'
              type: integer
              format: int32
              minimum: 1
        isFirstShowing:
          description: 'Set to true when the schedule contains first showings, set to false when it contains repeat showings.'
          type: boolean
          default: true

    DayOfWeek:
      description: 'Defines the day(s) of the week on which episodes of the show are scheduled.'
      type: string
      enum:
        - Monday
        - Tuesday
        - Wednesday
        - Thursday
        - Friday
        - Saturday
        - Sunday

    Month:
      description: 'Defines the month(s) of the year on which episodes of the show are scheduled.'
      type: string
      enum:
        - January
        - February
        - March
        - April
        - May
        - June
        - July
        - August
        - September
        - October
        - November
        - December

    Episode:
      description: 'An "episode" is a longer and clearly identifiable editorial broadcast which can consist of several individual contributions ("clips") (e.g.: Tagesschau of 20.04.2020) or has a thematically coherent context (e.g.: DOK film about the Generalsteik 1918).'
      type: object
      required:
        - sourceId
        - publisher
        - provenance
        - assetType
      properties:
        publisher:
          $ref: '#/components/schemas/Publisher'
        provenance:
          $ref: '#/components/schemas/Provenance'
        sourceId:
          type: string
        alternativeIdentifiers:
          type: array
          items:
            $ref: '#/components/schemas/AlternativeIdentifier'
        confidentialityLevel:
          $ref: '#/components/schemas/ConfidentialityLevel'
        assetType:
          $ref: '#/components/schemas/AssetType'
        distributionType:
          $ref: '#/components/schemas/DistributionType'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        title:
          $ref: '#/components/schemas/Text'
        abstract:
          $ref: '#/components/schemas/Text'
        description:
          $ref: '#/components/schemas/Text'
        archivedAt:
          type: string
          format: date-time
        broadcastAt:
          type: string
          format: date-time
        modifiedAt:
          type: string
          format: date-time
        producedAt:
          type: string
          format: date-time
        duration:
          type: integer
          format: int64
        genres:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
        productionTypes:
          type: array
          items:
            $ref: '#/components/schemas/ProductionType'
        location:
          type: array
          items:
            $ref: '#/components/schemas/Location'
        relatedEvents:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        relatedPictures:
          type: array
          items:
            $ref: '#/components/schemas/Picture'
        rights:
          type: array
          items:
            $ref: '#/components/schemas/Rights'
        contributors:
          type: array
          items:
            $ref: '#/components/schemas/Agent'
        topics:
          type: array
          items:
            $ref: '#/components/schemas/Topic'
        memberOf:
          $ref: '#/components/schemas/ShowReference'
        parts:
          type: array
          items:
            $ref: '#/components/schemas/Part'
        relatedEpisodes:
          type: array
          items:
            $ref: '#/components/schemas/EpisodeReference'
        scheduledOn:
          type: array
          items:
            $ref: '#/components/schemas/PublicationEvent'
        position:
          type: integer
          format: int32
        seasonNumber:
          type: integer
          format: int32
        episodeNumberInSeason:
          type: integer
          format: int32
        tagline:
          $ref: '#/components/schemas/Text'
        language:
          $ref: '#/components/schemas/Language'
        url:
          $ref: '#/components/schemas/URL'
        includedIn:
          type: array
          items:
            $ref: '#/components/schemas/EditorialGroupingReference'

    Article:
      description: 'A CMS website article.'
      type: object
      required:
        - sourceId
        - publisher
        - provenance
        - confidentialityLevel
      properties:
        sourceId:
          type: string
        publisher:
          $ref: '#/components/schemas/Publisher'
        provenance:
          $ref: '#/components/schemas/Provenance'
        confidentialityLevel:
          $ref: '#/components/schemas/ConfidentialityLevel'
        title:
          description: |
            The title of the article. The title may be available in different
            languages.
          type: array
          items:
            $ref: '#/components/schemas/Text'
        kicker:
          description: |
            A line of newspaper type set above a title usually in a different
            typeface and intended to provoke interest in, editorialize about, or
            provide orientation for the matter in the copy heads. The kicker may
            be available in different languages.
          type: array
          items:
            $ref: '#/components/schemas/Text'
        lead:
          description: |
            A lead is a self-contained, brief, and meaningful description of an
            article. The lead may be available in different languages.
          type: array
          items:
            $ref: '#/components/schemas/Text'
        contributors:
          description: 'People, teams or departments who contributed to the article.'
          type: array
          items:
            $ref: '#/components/schemas/Agent'
        genres:
          description: 'The genres this article belongs to.'
          type: array
          items:
            $ref: '#/components/schemas/Genre'
        relatedArticles:
          description: 'Other articles related to this article.'
          type: array
          items:
            $ref: '#/components/schemas/ArticleReference'
        images:
          description: 'The images of the article.'
          type: array
          items:
            $ref: '#/components/schemas/Image'
        content:
          $ref: '#/components/schemas/ArticleContent'
        url:
          description: 'The URL from where the article can be accessed.'
          $ref: '#/components/schemas/URL'
        modifiedAt:
          description: 'The date and time at which the article was modified.'
          type: string
          format: date-time
        releasedAt:
          description: 'The date and time at which the article was released.'
          type: string
          format: date-time
        publicationStatus:
          $ref: '#/components/schemas/PublicationStatus'
        isLongForm:
          description: 'Indicates whether the article is longer or more extensive.'
          type: boolean

    Correlation:
      description: 'A Correlation between two assets.'
      type: object
      required:
        - publisher
        - provenance
        - left
        - right
      properties:
        sourceId:
          type: string
        publisher:
          $ref: '#/components/schemas/Publisher'
        provenance:
          $ref: '#/components/schemas/Provenance'
        left:
          $ref: '#/components/schemas/AssetReference'
        right:
          $ref: '#/components/schemas/AssetReference'

    AssetReference:
      description: 'A reference to any asset.'
      discriminator:
        propertyName: type
        mapping:
          Source: '#/components/schemas/AssetSourceReference'
          Id: '#/components/schemas/AssetIdReference'
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/ReferenceDiscriminatorType'

    AssetSourceReference:
      description: 'A reference to an asset within a Correlation.'
      allOf:
        - $ref: '#/components/schemas/AssetReference'
        - type: object
          required:
            - provenance
            - assetType
            - sourceId
          properties:
            provenance:
              $ref: '#/components/schemas/Provenance'
            assetType:
              $ref: '#/components/schemas/AssetReferenceType'
            sourceId:
              type: string

    AssetIdReference:
      description: 'A reference to an asset within a Correlation.'
      allOf:
        - $ref: '#/components/schemas/AssetReference'
        - type: object
          required:
            - id
          properties:
            id:
              description: 'PDP id, format: "urn:pdp:{provenance}:{type}:{sourceId}"'
              type: string

    AssetReferenceType:
      type: string
      enum:
        - Article
        - Channel
        - Show
        - Episode
        - Content_Article
        - Content_Channel
        - Content_Show
        - Content_Episode

    CreatedResponse:
      description: A CreatedResponse which contains the pdp id of the persisted object
      type: object
      properties:
        id:
          type: string
    AcceptedResponse:
      description: Accepted write operation response
      type: object
      properties:
        id:
          type: string
    SuccessResponse:
      description: Created or updated resource response
      type: object
      properties:
        id:
          type: string
    Provenance:
      description: 'The source system publishing the metadata.'
      type: string
      enum:
        - CMS_SRF
        - Escenic_RSI
        - Escenic_RTS
        - Play_SRF
        - AIS_SRF
        - OfferPortfolio_SRF
    Publisher:
      description: 'The business unit or external organisation publishing the metadata. Please contact the PDP team if a publisher is missing.'
      type: string
      enum:
        - SRF
        - RTS
        - RSI
        - RTR
        - SWI
        - PZBundeshaus
        - NZZ
        - AP
        - SwissTXT
    ConfidentialityLevel:
      description: |
        The confidentiality level declares the sensitivity of the data and who
        is allowed to access it.
        - C1_Public: available to anyone
        - C2_Internal: available to SRG SSR employees only
      type: string
      enum:
        - C1_Public
        - C2_Internal
    Topic:
      type: object
      required:
        - name
      properties:
        name:
          $ref: '#/components/schemas/Text'
    Text:
      type: object
      required:
        - content
      properties:
        content:
          type: string
        language:
          $ref: '#/components/schemas/Language'
    Role:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    Agent:
      type: object
      discriminator:
        propertyName: type
        mapping:
          Person: '#/components/schemas/Person'
          Team: '#/components/schemas/Team'
          Department: '#/components/schemas/Department'
      required:
        - type
        - name
      properties:
        type:
          $ref: '#/components/schemas/AgentDiscriminatorType'
        name:
          type: string

    AgentDiscriminatorType:
      type: string
      enum:
        - Person
        - Team
        - Department

    Person:
      allOf:
        - $ref: '#/components/schemas/Agent'
        - type: object
          properties:
            roles:
              type: array
              items:
                $ref: '#/components/schemas/Role'

    Team:
      allOf:
        - $ref: '#/components/schemas/Agent'

    Department:
      allOf:
        - $ref: '#/components/schemas/Agent'

    Genre:
      type: object
      required:
        - name
      properties:
        name:
          $ref: '#/components/schemas/Text'
        description:
          $ref: '#/components/schemas/Text'
    Location:
      type: object
      required:
        - name
      properties:
        name:
          $ref: '#/components/schemas/Text'
    Event:
      type: object
      required:
        - name
      properties:
        name:
          $ref: '#/components/schemas/Text'

    Image:
      description: 'Describes visual material - such as logos, thumbnails or other visual elements - that belong to an asset.'
      type: object
      required:
        - variants
      properties:
        title:
          description: 'The title of the image in potentially different languages.'
          type: array
          items:
            $ref: '#/components/schemas/Text'
        copyright:
          description: 'The copyright holder of the image, e.g. "Keystone" or "Getty Images".'
          type: string
        usage:
          description: >
            The intended usage of the image, e.g. `TEASER` or `LOGO`.
            The source system should ensure the usage string remains the same 
            over time so consumers can reliably use it to identify the image.
          type: string
        variants:
          description: 'Variants of the image, e.g. hi-res and low-res or with and without logo.'
          type: array
          items:
            $ref: '#/components/schemas/ImageVariant'

    ImageVariant:
      description: 'A variant of an image, e.g. hi-res and low-res or with and without logo.'
      type: object
      required:
        - url
      properties:
        usage:
          description: >
            The intended usage of the image variant, e.g. different branding or
            different resolutions.
            The source system should ensure the usage string remains the same 
            over time so consumers can reliably use it to identify the variant.
          type: string
        url:
          $ref: '#/components/schemas/URL'
        width:
          description: 'The width of the image in pixels.'
          type: integer
          format: int32
        height:
          description: 'The height of the image in pixels.'
          type: integer
          format: int32
        aspectRatio:
          $ref: '#/components/schemas/AspectRatio'

    Picture:
      type: object
      required:
        - url
      properties:
        url:
          $ref: '#/components/schemas/URL'
        title:
          $ref: '#/components/schemas/Text'
        rights:
          type: array
          items:
            $ref: '#/components/schemas/Rights'
        width:
          type: integer
        height:
          type: integer
        aspectRatio:
          $ref: '#/components/schemas/AspectRatio'
    URL:
      type: object
      required:
        - url
      properties:
        url:
          type: string
    Rights:
      type: object
      properties:
        rightsHolder:
          $ref: '#/components/schemas/RightsHolder'
        usageRights:
          type: array
          items:
            type: string
        availableFrom:
          type: string
          format: date-time
        availableTo:
          type: string
          format: date-time
    RightsHolder:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    AspectRatio:
      description: 'The aspect ratio of an image.'
      type: object
      required:
        - ratio
      properties:
        ratio:
          description: 'The aspect ratio, e.g. 16:9 or 4:3.'
          type: string
    ArticleContent:
      description: 'The full text of the article.'
      type: object
      required:
        - text
      properties:
        text:
          type: array
          items:
            type: string
    PublicationStatus:
      description: 'Indicates if the website article has been published online.'
      type: string
      enum:
        - "Published"
        - "Unpublished"
    Language:
      type: string
      enum:
        - "ab"
        - "aa"
        - "af"
        - "ak"
        - "sq"
        - "am"
        - "ar"
        - "an"
        - "hy"
        - "as"
        - "av"
        - "ae"
        - "ay"
        - "az"
        - "bm"
        - "ba"
        - "eu"
        - "be"
        - "bn"
        - "bi"
        - "bs"
        - "br"
        - "bg"
        - "my"
        - "ca"
        - "ch"
        - "ce"
        - "ny"
        - "zh"
        - "cv"
        - "kw"
        - "co"
        - "cr"
        - "hr"
        - "cs"
        - "da"
        - "dv"
        - "nl"
        - "dz"
        - "en"
        - "eo"
        - "et"
        - "ee"
        - "fo"
        - "fj"
        - "fi"
        - "fr"
        - "ff"
        - "gl"
        - "ka"
        - "de"
        - "el"
        - "gn"
        - "gu"
        - "ht"
        - "ha"
        - "he"
        - "hz"
        - "hi"
        - "ho"
        - "hu"
        - "ia"
        - "id"
        - "ie"
        - "ga"
        - "ig"
        - "ik"
        - "io"
        - "is"
        - "it"
        - "iu"
        - "ja"
        - "jv"
        - "kl"
        - "kn"
        - "kr"
        - "ks"
        - "kk"
        - "km"
        - "ki"
        - "rw"
        - "ky"
        - "kv"
        - "kg"
        - "ko"
        - "ku"
        - "kj"
        - "la"
        - "lb"
        - "lg"
        - "li"
        - "ln"
        - "lo"
        - "lt"
        - "lu"
        - "lv"
        - "gv"
        - "mk"
        - "mg"
        - "ms"
        - "ml"
        - "mt"
        - "mi"
        - "mr"
        - "mh"
        - "mn"
        - "na"
        - "nv"
        - "nd"
        - "ne"
        - "ng"
        - "nb"
        - "nn"
        - "no"
        - "ii"
        - "nr"
        - "oc"
        - "oj"
        - "cu"
        - "om"
        - "or"
        - "os"
        - "pa"
        - "pi"
        - "fa"
        - "pl"
        - "ps"
        - "pt"
        - "qu"
        - "rm"
        - "rn"
        - "ro"
        - "ru"
        - "sa"
        - "sc"
        - "sd"
        - "se"
        - "sm"
        - "sg"
        - "sr"
        - "gd"
        - "sn"
        - "si"
        - "sk"
        - "sl"
        - "so"
        - "st"
        - "es"
        - "su"
        - "sw"
        - "ss"
        - "sv"
        - "ta"
        - "te"
        - "tg"
        - "th"
        - "ti"
        - "bo"
        - "tk"
        - "tl"
        - "tn"
        - "to"
        - "tr"
        - "ts"
        - "tt"
        - "tw"
        - "ty"
        - "ug"
        - "uk"
        - "ur"
        - "uz"
        - "ve"
        - "vi"
        - "vo"
        - "wa"
        - "cy"
        - "wo"
        - "fy"
        - "xh"
        - "yi"
        - "yo"
        - "za"
        - "zu"
    AlternativeIdentifier:
      type: object
      required:
        - publisher
        - provenance
        - value
        - type
      properties:
        publisher:
          $ref: '#/components/schemas/Publisher'
        provenance:
          $ref: '#/components/schemas/Provenance'
        value:
          type: string
        type:
          type: string
    AssetType:
      type: string
      enum:
        - Audio
        - Video
    DistributionType:
      type: string
      enum:
        - Broadcast
        - HbbTV
        - VideoOnDemand
        - AudioOnDemand
        - VideoPodcast
        - AudioPodcast
        - LiveStream
    Comment:
      description: 'A comment about an asset from the source system. Attention: these are not user comments!'
      type: object
      required:
        - text
      properties:
        text:
          type: string
    ProductionType:
      type: object
      required:
        - type
      properties:
        type:
          type: string
    Part:
      type: object
      properties:
        title:
          $ref: '#/components/schemas/Text'
        description:
          $ref: '#/components/schemas/Text'
        archivedAt:
          $ref: '#/components/schemas/Date'
        modifiedAt:
          $ref: '#/components/schemas/Date'
        start:
          $ref: '#/components/schemas/Long'
        duration:
          $ref: '#/components/schemas/Long'
        end:
          $ref: '#/components/schemas/Long'
        relatedLocations:
          type: array
          items:
            $ref: '#/components/schemas/Location'
        relatedEvents:
          type: array
          items:
            $ref: '#/components/schemas/Event'
    Date:
      type: string
      format: date-time
    Long:
      type: integer
      format: int64


    PublicationEvent:
      type: object
      properties:
        publicationStart:
          $ref: '#/components/schemas/Date'
        publicationEnd:
          $ref: '#/components/schemas/Date'
        publicationChannel:
          $ref: '#/components/schemas/ChannelReference'

    ReferenceDiscriminatorType:
      type: string
      enum:
        - Id
        - Source

    ChannelReference:
      description: 'A reference to a channel.'
      discriminator:
        propertyName: type
        mapping:
          Source: '#/components/schemas/ChannelSourceReference'
          Id: '#/components/schemas/ChannelIdReference'
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/ReferenceDiscriminatorType'

    ChannelSourceReference:
      allOf:
        - $ref: '#/components/schemas/ChannelReference'
        - type: object
          required:
            - provenance
            - sourceId
          properties:
            provenance:
              $ref: '#/components/schemas/Provenance'
            sourceId:
              type: string

    ChannelIdReference:
      description: 'PDP id, format: "urn:pdp:{provenance}:channel:{sourceId}"'
      allOf:
        - $ref: '#/components/schemas/ChannelReference'
        - type: object
          required:
            - id
          properties:
            id:
              type: string

    ShowReference:
      description: 'A reference to a show.'
      discriminator:
        propertyName: type
        mapping:
          Source: '#/components/schemas/ShowSourceReference'
          Id: '#/components/schemas/ShowIdReference'
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/ReferenceDiscriminatorType'

    ShowSourceReference:
      allOf:
        - $ref: '#/components/schemas/ShowReference'
        - type: object
          required:
            - provenance
            - sourceId
          properties:
            provenance:
              $ref: '#/components/schemas/Provenance'
            sourceId:
              type: string

    ShowIdReference:
      description: 'PDP id, format: "urn:pdp:{provenance}:show:{sourceId}"'
      allOf:
        - $ref: '#/components/schemas/ShowReference'
        - type: object
          required:
            - id
          properties:
            id:
              type: string

    EpisodeReference:
      description: 'A reference to an episode.'
      discriminator:
        propertyName: type
        mapping:
          Source: '#/components/schemas/EpisodeSourceReference'
          Id: '#/components/schemas/EpisodeIdReference'
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/ReferenceDiscriminatorType'

    EpisodeSourceReference:
      allOf:
        - $ref: '#/components/schemas/EpisodeReference'
        - type: object
          required:
            - provenance
            - sourceId
          properties:
            provenance:
              $ref: '#/components/schemas/Provenance'
            sourceId:
              type: string

    EpisodeIdReference:
      description: 'PDP id, format: "urn:pdp:{provenance}:episode:{sourceId}"'
      allOf:
        - $ref: '#/components/schemas/EpisodeReference'
        - type: object
          required:
            - id
          properties:
            id:
              type: string

    EditorialGroupingReference:
      type: object
      required:
        - type
      discriminator:
        propertyName: type
        mapping:
          Id: '#/components/schemas/EditorialGroupingIdReference'
          Source: '#/components/schemas/EditorialGroupingSourceReference'
      properties:
        type:
          $ref: '#/components/schemas/ReferenceDiscriminatorType'

    EditorialGroupingSourceReference:
      allOf:
        - $ref: '#/components/schemas/EditorialGroupingReference'
        - type: object
          required:
            - provenance
            - sourceId
          properties:
            provenance:
              $ref: '#/components/schemas/Provenance'
            sourceId:
              type: string

    EditorialGroupingIdReference:
      description: 'PDP id, format: "urn:pdp:{provenance}:editorialgrouping:{sourceId}"'
      allOf:
        - $ref: '#/components/schemas/EditorialGroupingReference'
        - type: object
          required:
            - id
          properties:
            id:
              type: string

    ClipReference:
      description: 'A reference to a clip.'
      discriminator:
        propertyName: type
        mapping:
          Source: '#/components/schemas/ClipSourceReference'
          Id: '#/components/schemas/ClipIdReference'
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/ReferenceDiscriminatorType'

    ClipSourceReference:
      allOf:
        - $ref: '#/components/schemas/ClipReference'
        - type: object
          required:
            - provenance
            - sourceId
          properties:
            provenance:
              $ref: '#/components/schemas/Provenance'
            sourceId:
              type: string

    ClipIdReference:
      description: 'PDP id, format: "urn:pdp:{provenance}:clip:{sourceId}"'
      allOf:
        - $ref: '#/components/schemas/ClipReference'
        - type: object
          required:
            - id
          properties:
            id:
              type: string

    ArticleReference:
      description: 'A reference to an article.'
      discriminator:
        propertyName: type
        mapping:
          Source: '#/components/schemas/ArticleSourceReference'
          Id: '#/components/schemas/ArticleIdReference'
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/ReferenceDiscriminatorType'

    ArticleSourceReference:
      allOf:
        - $ref: '#/components/schemas/ArticleReference'
        - type: object
          required:
            - provenance
            - sourceId
          properties:
            provenance:
              $ref: '#/components/schemas/Provenance'
            sourceId:
              type: string

    ArticleIdReference:
      allOf:
        - $ref: '#/components/schemas/ArticleReference'
        - type: object
          required:
            - id
          properties:
            id:
              description: 'PDP id, format: "urn:pdp:{provenance}:article:{sourceId}"'
              type: string

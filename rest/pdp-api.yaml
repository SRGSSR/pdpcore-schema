openapi: 3.0.3
info:
  title: PDP REST API
  description: REST API for SRG SSR's Publication Data Platform.
  version: v1
servers:
  - url: https://api.pdp.{environment}.srgssr.ch/api
    variables:
      environment:
        default: production
        enum:
          - dev
          - int
          - production
externalDocs:
  description: PDP Schema Documentation
  url: 'https://api.pdp.production.srgssr.ch/docs-page.html#section-2'

paths:

  /contents:
    post:
      tags:
        - content
      summary: 'Create or update content and its extracted domain object.'
      operationId: postContent
      responses:
        '200':
          description: >
            The content is successfully stored in the PDP and available in the
            Kafka topics "contents". The source data is extracted asynchronously
            and should be available as the appropriate domain object in the
            GraphQL API and Kafka topic shortly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - azure_auth:
            - 'write:all'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Content'
        description: Article payload
        required: true
    delete:
      tags:
        - content
      summary: >
        Delete content by provenance, domain type and sourceId. This also 
        deletes the domain object that was extracted from this content.
      operationId: deleteContentByQuery
      parameters:
        - name: provenance
          in: query
          description: 'The source system publishing the metadata.'
          required: true
          schema:
            $ref: '#/components/schemas/Provenance'
        - name: domainType
          in: query
          description: 'The domain type of the content.'
          required: true
          schema:
            $ref: '#/components/schemas/DomainType'
        - name: sourceId
          in: query
          description: 'The id in the source system. It has to be unique for the domain type in the source system, but not globally.'
          required: true
          schema:
            type: string
      responses:
        '204':
          description: >
            The content is deleted. Extracted domain objects are deleted 
            asynchronously, i.e. it will be unavailable in GraphQL API and the 
            appropriate Kafka topic will receive a tombstone record shortly.
        '400':
          description: 'Bad request, e.g. invalid parameter values.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - azure_auth:
            - 'write:all'

  /contents/{pdpId}:
    delete:
      tags:
        - content
      summary: >
        Delete content by PDP ID. This also deletes the domain object that was
        extracted from this content.
      operationId: deleteContentById
      parameters:
        - name: pdpId
          in: path
          description: 'A PDP ID of a content.'
          required: true
          schema:
            type: string
      responses:
        '204':
          description: >
            The content is deleted. Extracted domain objects are deleted 
            asynchronously, i.e. it will be unavailable in GraphQL API and the 
            appropriate Kafka topic will receive a tombstone record shortly.
        '400':
          description: 'Not found'
      security:
        - azure_auth:
            - 'write:all'

  /articles:
    post:
      tags:
        - article
      summary: Upsert article
      operationId: postArticle
      responses:
        '202':
          description: Accepted request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
        '400':
          description: Invalid input
      security:
        - azure_auth:
            - 'write:all'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
        description: Article payload
        required: true

  /correlations:
    post:
      tags:
        - correlations
      summary: Upsert Correlation
      operationId: postCorrelation
      responses:
        '201':
          description: Accepted request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedResponse'
        '400':
          description: Invalid input
      security:
        - azure_auth:
            - 'write:all'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Correlation'
        description: Correlation payload
        required: true

components:
  securitySchemes:
    azureAuthDev:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: 'https://login.microsoftonline.com/2598639a-d083-492d-bdbe-f1dd8066b03a/oauth2/v2.0/token'
          authorizationUrl: 'https://login.microsoftonline.com/2598639a-d083-492d-bdbe-f1dd8066b03a/oauth2/v2.0/authorize'
          scopes:
            'write:all': 'https://graphql-api.pdp.dev.srgssr.ch/api/.default'
    azureAuthInt:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: 'https://login.microsoftonline.com/2598639a-d083-492d-bdbe-f1dd8066b03a/oauth2/v2.0/token'
          authorizationUrl: 'https://login.microsoftonline.com/2598639a-d083-492d-bdbe-f1dd8066b03a/oauth2/v2.0/authorize'
          scopes:
            'write:all': 'https://graphql-api.pdp.int.srgssr.ch/api/.default'
    azureAuthProduction:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: 'https://login.microsoftonline.com/2598639a-d083-492d-bdbe-f1dd8066b03a/oauth2/v2.0/token'
          authorizationUrl: 'https://login.microsoftonline.com/2598639a-d083-492d-bdbe-f1dd8066b03a/oauth2/v2.0/authorize'
          scopes:
            'write:all': 'https://graphql-api.pdp.production.srgssr.ch/api/.default'

  schemas:

    ApiError:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: integer
        message:
          type: string

    DomainType:
      description: |
        The type of the content. Contact the PDP team if you have data that does
        not fit any of these types.
      type: string
      enum:
        - Article

    Content:
      description: >
        Content is an envelope around the input
      type: object
      required:
        - domainType
        - sourceId
        - publisher
        - provenance
        - confidentialityLevel
        - sourceData
      properties:
        domainType:
          $ref: '#/components/schemas/DomainType'
        publisher:
          $ref: '#/components/schemas/Publisher'
        provenance:
          $ref: '#/components/schemas/Provenance'
        sourceId:
          description: >
            The id of the content in the source system. It must be unique for
            the domain type in the source system, but not globally.
          type: string
        confidentialityLevel:
          $ref: '#/components/schemas/ConfidentialityLevel'
        sourceData:
          $ref: '#/components/schemas/SourceData'

    SourceData:
      description:
        Upstream data source model
      type: object
      required:
        - data
        - schema
      properties:
        data:
          description: String of source data
          type: string
        schema:
          $ref: '#/components/schemas/SourceSchema'
        mimeType:
          description: "Source data mimetype"
          type: string
          default: "application/json"

    SourceSchema:
      description: "Source data version"
      type: object
      required:
        - version
      properties:
        version:
          type: string

    Article:
      description: 'A CMS website article.'
      type: object
      required:
        - sourceId
        - publisher
        - provenance
        - confidentialityLevel
      properties:
        sourceId:
          type: string
        publisher:
          $ref: '#/components/schemas/Publisher'
        provenance:
          $ref: '#/components/schemas/Provenance'
        confidentialityLevel:
          $ref: '#/components/schemas/ConfidentialityLevel'
        title:
          description: |
            The title of the article. The title may be available in different
            languages.
          type: array
          items:
            $ref: '#/components/schemas/Text'
        kicker:
          description: |
            A line of newspaper type set above a title usually in a different
            typeface and intended to provoke interest in, editorialize about, or
            provide orientation for the matter in the copy heads. The kicker may
            be available in different languages.
          type: array
          items:
            $ref: '#/components/schemas/Text'
        lead:
          description: |
            A lead is a self-contained, brief, and meaningful description of an
            article. The lead may be available in different languages.
          type: array
          items:
            $ref: '#/components/schemas/Text'
        contributors:
          description: 'People, teams or departments who contributed to the article.'
          type: array
          items:
            $ref: '#/components/schemas/Agent'
        genres:
          description: 'The genres this article belongs to.'
          type: array
          items:
            $ref: '#/components/schemas/Genre'
        relatedArticles:
          description: 'Other articles related to this article.'
          type: array
          items:
            $ref: '#/components/schemas/ArticleReference'
        images:
          description: 'The images of the article.'
          type: array
          items:
            $ref: '#/components/schemas/Image'
        content:
          $ref: '#/components/schemas/ArticleContent'
        url:
          description: 'The URL from where the article can be accessed.'
          $ref: '#/components/schemas/URL'
        modifiedAt:
          description: 'The date and time at which the article was modified.'
          type: string
          format: date-time
        releasedAt:
          description: 'The date and time at which the article was released.'
          type: string
          format: date-time
        publicationStatus:
          $ref: '#/components/schemas/PublicationStatus'
        isLongForm:
          description: 'Indicates whether the article is longer or more extensive.'
          type: boolean

    Correlation:
      description: 'A Correlation between two assets.'
      type: object
      required:
        - publisher
        - provenance
        - left
        - right
      properties:
        sourceId:
          type: string
        publisher:
          $ref: '#/components/schemas/Publisher'
        provenance:
          $ref: '#/components/schemas/Provenance'
        left:
          $ref: '#/components/schemas/AssetReference'
        right:
          $ref: '#/components/schemas/AssetReference'

    AssetReference:
      description: 'A reference to any asset.'
      discriminator:
        propertyName: type
        mapping:
          Source: '#/components/schemas/AssetSourceReference'
          Id: '#/components/schemas/AssetIdReference'
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/ReferenceDiscriminatorType'

    AssetSourceReference:
      description: 'A reference to an asset within a Correlation.'
      allOf:
        - $ref: '#/components/schemas/AssetReference'
        - type: object
          required:
            - provenance
            - assetType
            - sourceId
          properties:
            provenance:
              $ref: '#/components/schemas/Provenance'
            assetType:
              $ref: '#/components/schemas/AssetReferenceType'
            sourceId:
              type: string

    AssetIdReference:
      description: 'A reference to an asset within a Correlation.'
      allOf:
        - $ref: '#/components/schemas/AssetReference'
        - type: object
          required:
            - id
          properties:
            id:
              description: 'PDP id, format: "urn:pdp:{provenance}:{type}:{sourceId}"'
              type: string

    AssetReferenceType:
      type: string
      enum:
        - Article
        - Channel
        - Content_Article

    CreatedResponse:
      description: A CreatedResponse which contains the pdp id of the persisted object
      type: object
      properties:
        id:
          type: string

    AcceptedResponse:
      description: Accepted write operation response
      type: object
      properties:
        id:
          type: string

    SuccessResponse:
      description: Created or updated resource response
      type: object
      properties:
        id:
          type: string

    Provenance:
      description: 'The source system publishing the metadata.'
      type: string
      enum:
        - CMS_SRF
        - Escenic_RSI
        - Escenic_RTS
        - Play_SRF
        - AIS_SRF
        - OfferPortfolio_SRF

    Publisher:
      description: 'The business unit or external organisation publishing the metadata. Please contact the PDP team if a publisher is missing.'
      type: string
      enum:
        - SRF
        - RTS
        - RSI
        - RTR
        - SWI
        - PZBundeshaus
        - NZZ
        - AP
        - SwissTXT

    ConfidentialityLevel:
      description: |
        The confidentiality level declares the sensitivity of the data and who
        is allowed to access it.
        - C1_Public: available to anyone
        - C2_Internal: available to SRG SSR employees only
      type: string
      enum:
        - C1_Public
        - C2_Internal

    Text:
      type: object
      required:
        - content
      properties:
        content:
          type: string
        language:
          $ref: '#/components/schemas/Language'

    Role:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    Agent:
      type: object
      discriminator:
        propertyName: type
        mapping:
          Person: '#/components/schemas/Person'
          Team: '#/components/schemas/Team'
          Department: '#/components/schemas/Department'
      required:
        - type
        - name
      properties:
        type:
          $ref: '#/components/schemas/AgentDiscriminatorType'
        name:
          type: string

    AgentDiscriminatorType:
      type: string
      enum:
        - Person
        - Team
        - Department

    Person:
      allOf:
        - $ref: '#/components/schemas/Agent'
        - type: object
          properties:
            roles:
              type: array
              items:
                $ref: '#/components/schemas/Role'

    Team:
      allOf:
        - $ref: '#/components/schemas/Agent'

    Department:
      allOf:
        - $ref: '#/components/schemas/Agent'

    Genre:
      type: object
      required:
        - name
      properties:
        name:
          $ref: '#/components/schemas/Text'
        description:
          $ref: '#/components/schemas/Text'

    Image:
      description: 'Describes visual material - such as logos, thumbnails or other visual elements - that belong to an asset.'
      type: object
      required:
        - variants
      properties:
        title:
          description: 'The title of the image in potentially different languages.'
          type: array
          items:
            $ref: '#/components/schemas/Text'
        copyright:
          description: 'The copyright holder of the image, e.g. "Keystone" or "Getty Images".'
          type: string
        usage:
          description: >
            The intended usage of the image, e.g. `TEASER` or `LOGO`.
            The source system should ensure the usage string remains the same 
            over time so consumers can reliably use it to identify the image.
          type: string
        variants:
          description: 'Variants of the image, e.g. hi-res and low-res or with and without logo.'
          type: array
          items:
            $ref: '#/components/schemas/ImageVariant'

    ImageVariant:
      description: 'A variant of an image, e.g. hi-res and low-res or with and without logo.'
      type: object
      required:
        - url
      properties:
        usage:
          description: >
            The intended usage of the image variant, e.g. different branding or
            different resolutions.
            The source system should ensure the usage string remains the same 
            over time so consumers can reliably use it to identify the variant.
          type: string
        url:
          $ref: '#/components/schemas/URL'
        width:
          description: 'The width of the image in pixels.'
          type: integer
          format: int32
        height:
          description: 'The height of the image in pixels.'
          type: integer
          format: int32
        aspectRatio:
          $ref: '#/components/schemas/AspectRatio'

    URL:
      type: object
      required:
        - url
      properties:
        url:
          type: string

    AspectRatio:
      description: 'The aspect ratio of an image.'
      type: object
      required:
        - ratio
      properties:
        ratio:
          description: 'The aspect ratio, e.g. 16:9 or 4:3.'
          type: string

    ArticleContent:
      description: 'The full text of the article.'
      type: object
      required:
        - text
      properties:
        text:
          type: array
          items:
            type: string

    PublicationStatus:
      description: 'Indicates if the website article has been published online.'
      type: string
      enum:
        - "Published"
        - "Unpublished"

    Language:
      type: string
      enum:
        - "ab"
        - "aa"
        - "af"
        - "ak"
        - "sq"
        - "am"
        - "ar"
        - "an"
        - "hy"
        - "as"
        - "av"
        - "ae"
        - "ay"
        - "az"
        - "bm"
        - "ba"
        - "eu"
        - "be"
        - "bn"
        - "bi"
        - "bs"
        - "br"
        - "bg"
        - "my"
        - "ca"
        - "ch"
        - "ce"
        - "ny"
        - "zh"
        - "cv"
        - "kw"
        - "co"
        - "cr"
        - "hr"
        - "cs"
        - "da"
        - "dv"
        - "nl"
        - "dz"
        - "en"
        - "eo"
        - "et"
        - "ee"
        - "fo"
        - "fj"
        - "fi"
        - "fr"
        - "ff"
        - "gl"
        - "ka"
        - "de"
        - "el"
        - "gn"
        - "gu"
        - "ht"
        - "ha"
        - "he"
        - "hz"
        - "hi"
        - "ho"
        - "hu"
        - "ia"
        - "id"
        - "ie"
        - "ga"
        - "ig"
        - "ik"
        - "io"
        - "is"
        - "it"
        - "iu"
        - "ja"
        - "jv"
        - "kl"
        - "kn"
        - "kr"
        - "ks"
        - "kk"
        - "km"
        - "ki"
        - "rw"
        - "ky"
        - "kv"
        - "kg"
        - "ko"
        - "ku"
        - "kj"
        - "la"
        - "lb"
        - "lg"
        - "li"
        - "ln"
        - "lo"
        - "lt"
        - "lu"
        - "lv"
        - "gv"
        - "mk"
        - "mg"
        - "ms"
        - "ml"
        - "mt"
        - "mi"
        - "mr"
        - "mh"
        - "mn"
        - "na"
        - "nv"
        - "nd"
        - "ne"
        - "ng"
        - "nb"
        - "nn"
        - "no"
        - "ii"
        - "nr"
        - "oc"
        - "oj"
        - "cu"
        - "om"
        - "or"
        - "os"
        - "pa"
        - "pi"
        - "fa"
        - "pl"
        - "ps"
        - "pt"
        - "qu"
        - "rm"
        - "rn"
        - "ro"
        - "ru"
        - "sa"
        - "sc"
        - "sd"
        - "se"
        - "sm"
        - "sg"
        - "sr"
        - "gd"
        - "sn"
        - "si"
        - "sk"
        - "sl"
        - "so"
        - "st"
        - "es"
        - "su"
        - "sw"
        - "ss"
        - "sv"
        - "ta"
        - "te"
        - "tg"
        - "th"
        - "ti"
        - "bo"
        - "tk"
        - "tl"
        - "tn"
        - "to"
        - "tr"
        - "ts"
        - "tt"
        - "tw"
        - "ty"
        - "ug"
        - "uk"
        - "ur"
        - "uz"
        - "ve"
        - "vi"
        - "vo"
        - "wa"
        - "cy"
        - "wo"
        - "fy"
        - "xh"
        - "yi"
        - "yo"
        - "za"
        - "zu"

    ReferenceDiscriminatorType:
      type: string
      enum:
        - Id
        - Source

    ArticleReference:
      description: 'A reference to an article.'
      discriminator:
        propertyName: type
        mapping:
          Source: '#/components/schemas/ArticleSourceReference'
          Id: '#/components/schemas/ArticleIdReference'
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/ReferenceDiscriminatorType'

    ArticleSourceReference:
      allOf:
        - $ref: '#/components/schemas/ArticleReference'
        - type: object
          required:
            - provenance
            - sourceId
          properties:
            provenance:
              $ref: '#/components/schemas/Provenance'
            sourceId:
              type: string

    ArticleIdReference:
      allOf:
        - $ref: '#/components/schemas/ArticleReference'
        - type: object
          required:
            - id
          properties:
            id:
              description: 'PDP id, format: "urn:pdp:{provenance}:article:{sourceId}"'
              type: string
